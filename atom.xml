<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chendd's Blog]]></title>
  <link href="http://chendd.github.io/atom.xml" rel="self"/>
  <link href="http://chendd.github.io/"/>
  <updated>2017-10-09T17:52:50+08:00</updated>
  <id>http://chendd.github.io/</id>
  <author>
    <name><![CDATA[chendd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android中的内存管理和正确的使用方式]]></title>
    <link href="http://chendd.github.io/blog/2017/03/23/android_oom/"/>
    <updated>2017-03-23T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2017/03/23/android_oom</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>&#160; &#160; &#160; &#160;从操作系统的角度来说，内存就是一块数据存储区域，属于可被操作系统调度的资源。现代多任务（进程）的操作系统中，内存管理尤为重要，操作系统需要为每一个进程合理的分配内存资源，所以可以从两方面来理解操作系统的内存管理机制。</p>

<p>第一：分配机制。为每一个进程分配一个合理的内存大小，保证每一个进程能够正常的运行，不至于内存不够使用或者每个进程占用太多的内存。</p>

<p>第二：回收机制。在系统内存不足打的时候，需要有一个合理的回收再分配的机制，以保证新的进程可以正常运行。回收的时候就要杀死那些正在占有内存的进程，操作系统需要提供一个合理的杀死这些进程的机制，以保证更少的副作用。</p>

<p>而作为一个多进程的操作系统，Android系统对内存的管理，也是有一套自己的方法的。跟PC不一样的是，Android作为一个移动操作系统，一般情况下，内存资源会比PC更少，所以就需要更加谨慎的管理内存。</p>

<!--more-->


<h2>Android中的内存管理机制</h2>

<h4>分配机制</h4>

<p>&#160; &#160; &#160; &#160;Android为每个进程分配内存的时候，采用了弹性的分配方式，也就是刚开始并不会一下分配很多内存给每个进程，而是给每一个进程分配一个“够用”的量。这个量是根据每一个设备实际的物理内存大小来决定的。随着应用的运行，可能会发现当前的内存可能不够使用了，这时候Android又会为每个进程分配一些额外的内存大小。但是这些额外的大小并不是随意的，也是有限度的，系统不可能为每一个App分配无限大小的内除。</p>

<p>&#160; &#160; &#160; &#160;Android系统的宗旨是最大限度的让更多的进程存活在内存中，因为这样的话，下一次用户再启动应用，不需要重新创建进程，只需要恢复已有的进程就可以了，减少了应用的启动时间，提高了用户体验。</p>

<h4>回收机制</h4>

<p>&#160; &#160; &#160; &#160;Android对内存的使用方式是“尽最大限度的使用”，这一点继承了Linux的优点。Android会在内存中保存尽可能多的数据，即使有些进程不再使用了，但是它的数据还被存储在内存中，所以Android现在不推荐显式的“退出”应用。因为这样，当用户下次再启动应用的时候，只需要恢复当前进程就可以了，不需要重新创建进程，这样就可以减少应用的启动时间。只有当Android系统发现内存不够使用，需要回收内存的时候，Android系统就会需要杀死其他进程，来回收足够的内存。但是Android也不是随便杀死一个进程，比如说一个正在与用户交互的进程，这种后果是可怕的。所以Android会有限清理那些已经不再使用的进程，以保证最小的副作用。</p>

<p>Android杀死进程有两个参考条件：</p>

<p>进程优先级：</p>

<p>Android为每一个进程分配了优先级的概念，优先级越低的进程，被杀死的概率就更大。Android中总共有5个进程优先级。具体含义这里不再给出。</p>

<p>前台进程：正常不会被杀死</p>

<p>可见进程：正常不会被杀死</p>

<p>服务进程：正常不会被杀死</p>

<p>后台进程：存放于一个LRU缓存列表中，先杀死处于列表尾部的进程</p>

<p>空进程：正常情况下，为了平衡系统整体性能，Android不保存这些进程</p>

<p>回收收益：</p>

<p>&#160; &#160; &#160; &#160;当Android系统开始杀死LRU缓存中的进程时，系统会判断每个进程杀死后带来的回收收益。因为Android总是倾向于杀死一个能回收更多内存的进程，从而可以杀死更少的进程，来获取更多的内存。杀死的进程越少，对用户体验的影响就越小。</p>

<h2>官方推荐的App内存使用方式是什么样的？</h2>

<ul>
<li>1、当Service完成任务后，尽量停止它。</li>
</ul>


<p>因为有Service组件的进程，优先级最低也是服务进程，这会影响到系统的内存回收。IntentService可以很好地完成这个任务。</p>

<ul>
<li>2、在UI不可见的时候，释放掉一些只有UI使用的资源。</li>
</ul>


<p>系统会根据onTrimMemory()回调方法的TRIM_MEMORY_UI_HIDDEN等级的事件，来通知App UI已经隐藏了。</p>

<ul>
<li>3、在系统内存紧张的时候，尽可能多的释放掉一些非重要资源。</li>
</ul>


<p>系统会根据onTrimMemory()回调方法来通知内存紧张的状态，App应该根据不同的内存紧张等级，来合理的释放资源，以保证系统能够回收更多内存。当系统回收到足够多的内存时，就不用杀死进程了。</p>

<ul>
<li>4、检查自己最大可用的内存大小。</li>
</ul>


<p>这对一些缓存框架很有用，因为正常情况下，缓存框架的缓存池大小应当指定为最大内存的百分比，这样才能更好地适配更多的设备。通过getMemoryClass()和getLargeMemoryClass()来获取可用内存大小的信息。</p>

<ul>
<li>5、避免滥用Bitmap导致的内存浪费。</li>
</ul>


<p>根据当前设备的分辨率来压缩Bitmap是一个不错的选择，在使用完Bitmap后，记得要使用recycle()来释放掉Bitmap。使用软引用或者弱引用来引用一个Bitmap，使用LRU缓存来对Bitmap进行缓存。</p>

<ul>
<li>6、使用针对内存优化过的数据容器。</li>
</ul>


<p>针对移动设备内存有限的问题，Android提供了一套针对内存优化过的数据容器，来替代JDK原生提供的数据容器。但是缺点就是，时间复杂度被提高了。比如SparseArray、SparseBooleanArray、LongSparseArray、</p>

<ul>
<li>7、意识到内存的过度消耗。</li>
</ul>


<p>Enum类型占用的内存是常量的两倍多，所以避免使用enum，直接使用常量。</p>

<p>每一个Java的类（包括匿名内部类）都需要500Byte的代码。</p>

<p>每一个类的实例都有12-16 Byte的额外内存消耗。</p>

<p>注意类似于HashMap这种，内部还需要生成Class的数据容器，这会消耗更多内存。</p>

<ul>
<li>8、抽象代码也会带来更多的内存消耗。</li>
</ul>


<p>如果你的“抽象”设计实际上并没有带来多大好处，那么就不要使用它。</p>

<ul>
<li>9、使用nano protobufs 来序列化数据。</li>
</ul>


<p>Google设计的一个语言和平台中立打的序列化协议，比XML更快、更小、更简单。</p>

<ul>
<li>10、避免使用依赖注入的框架。</li>
</ul>


<p>依赖注入的框架需要开启额外的服务，来扫描App中代码的Annotation，所以需要额外的系统资源。</p>

<ul>
<li>11、使用ZIP对齐的APK。</li>
</ul>


<p>对APK做Zip对齐，会压缩其内部的资源，运行时会占用更少的内存。</p>

<ul>
<li>12、使用多进程。</li>
</ul>


<h2>一个符合Android内存管理机制的App应该是什么样的？</h2>

<p>一个遵循Android内存管理机制的App。应该具有如下几个特点：</p>

<ul>
<li><p>1、更少的占用内存。</p></li>
<li><p>2、在合适的时候，合理的释放系统资源。</p></li>
<li><p>3、在系统内存紧张的情况下，能释放掉大部分不重要的资源，来为Android系统提供可用的内存。</p></li>
<li><p>4、能够很合理的在特殊生命周期中，保存或者还原重要数据，以至于系统能够正确的重新恢复该应用。</p></li>
</ul>


<h2>App为什么要符合该内存管理机制？这样做有什么好处？</h2>

<p>&#160; &#160; &#160; &#160;一个遵循Android的内存管理机制的App，在Android系统中，就是一个好的公民，那么系统自然是倾向于保护这些良民，而去杀死那些素质不高的人。所以符合Android内存管理机制，对Android系统和App来说，是一个双赢的过程。如果每一个App都遵循这种规则，那么Android系统就会更加流畅，也会带来更好的体验，而App可以更长时间的驻留于内存中。</p>

<p>在这种管理方式下，如何编写符合Android内存管理机制的App？
主要是参考官方推荐的内存使用方式，来设计和编写App。</p>

<p>避免创建不必要的对象。</p>

<p>在合适的生命周期中，合理的管理资源。</p>

<p>在系统内存不足时，主动释放更多的资源。</p>

<p>编写Android应用时，如何更少的使用内存资源？
避免创建不需要的对象。</p>

<p>比如使用StringBuffer来代替很多个String相加的操作。</p>

<p>使用原始类型来代替包装类型，int比Integer占用更少的资源。</p>

<p>两个并行的属性数组，优于一个包含这两个属性的对象的数组。这个在设计数据容器的时候会有意义，比如类A有两个属性A(int, String)，使用 int[] 和 String[] 优于 A[]。</p>

<p>使用常量代替enum。</p>

<p>少用包装类，能够使用原始类型的，就使用原始类型。</p>

<h2>App如果真的需要很多内存怎么办？</h2>

<h4>多进程</h4>

<p>&#160; &#160; &#160; &#160;把消耗内存过大的模块，或者需要长期在后台运行的模块，移入到单独的进程中运行。Android会为每一个进程单独分配内存，所以理论上App就可以使用到更多的内存。但是多进程是一把双刃剑，错误的使用，会带来其他很多的问题，这里不再详细谈这个话题。</p>

<h4>申请大内存</h4>

<p>&#160; &#160; &#160; &#160;在<application>标签中，把largeHeap设置为true，Android系统会为该应用额外分配内存。但是不要滥用这个方法。如果一个App真的需要大内存，比如需要打开很多大图片的应用，可以使用这种方式。千万不要因为OOM而使用这种方法，这个时候更应该去检查App的代码是否不合理。</p>

<h2>开发人员应该注意的App内存管理方式？</h2>

<h4>内存溢出</h4>

<p>&#160; &#160; &#160; &#160;内存溢出，就是OOM，也就是内存不够用了。有一个典型的例子就是加载了很多没有经过压缩的Bitmap到内存中，这些Bitmap很大，但是又真的在被使用，必须要在内存中，所以这个时候内存就不够用了。这个时候，App再申请更多内存的时候就不行了，系统会抛出OOM。</p>

<p>&#160; &#160; &#160; &#160;解决这种问题：1、减少每个对象占用的内存，比如压缩图片。2、申请大内存。</p>

<h4>内存泄露</h4>

<p>&#160; &#160; &#160; &#160;内存泄露，就是Memory Leak，也就是本来该被GC回收后还给系统的内存，并没有被GC。多数是因为不合理的对象引用，当一个对象不再使用的时候，由于代码问题，没有正确的释放引用，就导致了内存泄露。</p>

<p>&#160; &#160; &#160; &#160;解决这种问题：1、通过各种内存分析工具，比如MAT，分析运行时的内存映像文件，找出造成内存泄露的代码，然后修改掉。2、适当的使用WeakReference。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVP模式和RxAndroid结合例子]]></title>
    <link href="http://chendd.github.io/blog/2017/01/11/android_mvp_rxandroid/"/>
    <updated>2017-01-11T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2017/01/11/android_mvp_rxandroid</id>
    <content type="html"><![CDATA[<h2>MVP是什么</h2>

<p>&#160; &#160; &#160; &#160;在MVC框架中，View是可以直接读取Model模型中的数据的，Model模型数据发生改变是会通知View数据显示发生相应的改变。
而在MVP中Model和View之间的没有任何联系，是两个完全独立的模块，当Model模型发生数据改变时，通过Presenter通知View视图发生相应的UI改变。
根据单一职责原则，Activity主要起到用户交互作用，也就是接收用户输入，显示请求结果。因此可以通过MVP框架模式来减轻Activity的职责。</p>

<p>参考博客：<a href="http://blog.csdn.net/feiduclear_up/article/details/46374653">框架模式MVP在Android中的使用</a></br></p>

<h2>RxAndroid是什么</h2>

<p>&#160; &#160; &#160; &#160;RxAndroid可以简单高度概括为“异步”。
异步操作很关键的一点是程序的简洁性，因为在调度过程比较复杂的情况下，异步代码经常会既难写也难被读懂。 Android 创造的 AsyncTask 和Handler ，其实都是为了让异步代码更加简洁。RxJava 的优势也是简洁，但它的简洁的与众不同之处在于，随着程序逻辑变得越来越复杂，它依然能够保持简洁。</p>

<p>Github:<a href="https://github.com/ReactiveX/RxAndroid">ReactiveX/RxAndroid</a> </br>
参考博客：<a href="http://gank.io/post/560e15be2dca930e00da1083">给 Android 开发者的 RxJava详解</a> </br></p>

<!--more-->


<h4>具体例子代码</h4>

<p>&#160; &#160; &#160; &#160;对MVP和RxAndroid不了解的可以去上面说的博客去看一下，都是很好的博客，感谢大牛分享！
我这里以最简单粗暴的方式贴出代码，建议先上手再研究，先能够让程序跑起来，再去研究代码里面的实现原理。
效果图</p>

<p><img src="http://img.blog.csdn.net/20151024105733397" alt="image" /></p>

<p>引入RxAndroid：在dependencies下面加入如下代码
最新版本请自己查看Github首页文档：ReactiveX/RxAndroid</p>

<blockquote><p>compile ‘io.reactivex:rxandroid:1.1.0’ </br>
compile ‘io.reactivex:rxjava:1.1.0’</p></blockquote>

<h4>bean</h4>

<p>这里是一个简单的例子，User只有一个属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">regulus</span><span class="o">.</span><span class="na">rxandroidtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Model</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">regulus</span><span class="o">.</span><span class="na">rxandroidtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.SystemClock</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">rx.Observable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">rx.Subscriber</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserModel</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getUser</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="k">new</span> <span class="n">Observable</span><span class="o">.</span><span class="na">OnSubscribe</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Subscriber</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">User</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 设置个2000ms的延迟，模拟网络访问、数据库操作等等延时操作</span>
</span><span class='line'>                <span class="n">SystemClock</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//                final User user = null;</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;赵日天&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">subscriber</span><span class="o">.</span><span class="na">onError</span><span class="o">(</span><span class="k">new</span> <span class="nf">Exception</span><span class="o">(</span><span class="s">&quot;User = null&quot;</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">subscriber</span><span class="o">.</span><span class="na">onCompleted</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>View</h4>

<p>定义View的接口，把Activity看成View，实现View接口。
Activity只负责监听点击等事件，然后反馈给Presenter，由Presenter调度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">regulus</span><span class="o">.</span><span class="na">rxandroidtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserView</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">updateView</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">showProgressDialog</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">hideProgressDialog</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">showError</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">regulus</span><span class="o">.</span><span class="na">rxandroidtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.ProgressDialog</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v7.app.AppCompatActivity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.Toast</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">AppCompatActivity</span> <span class="kd">implements</span> <span class="n">UserView</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Context</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TextView</span> <span class="n">mTvShow</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ProgressDialog</span> <span class="n">mProgressDialog</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">UserPresenter</span> <span class="n">mUserPresenter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mUserPresenter</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UserPresenter</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mProgressDialog</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProgressDialog</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mProgressDialog</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="s">&quot;正在加载，请稍后..&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mTvShow</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_show</span><span class="o">);</span>
</span><span class='line'>        <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn_update</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mUserPresenter</span><span class="o">.</span><span class="na">getUser</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mProgressDialog</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mProgressDialog</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateView</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mTvShow</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showProgressDialog</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mProgressDialog</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hideProgressDialog</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mProgressDialog</span><span class="o">.</span><span class="na">hide</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showError</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">msg</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Presenter</h4>

<p>Presenter相当于MVC中的控制器，负责Model和View的沟通。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">regulus</span><span class="o">.</span><span class="na">rxandroidtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">rx.Subscriber</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">rx.android.schedulers.AndroidSchedulers</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">rx.schedulers.Schedulers</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Presenter作为Model和View通讯的桥梁，需要持有它们的引用。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserPresenter</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">UserView</span> <span class="n">mUserView</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">UserModel</span> <span class="n">mUserModel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">UserPresenter</span><span class="o">(</span><span class="n">UserView</span> <span class="n">mUserView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mUserView</span> <span class="o">=</span> <span class="n">mUserView</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mUserModel</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UserModel</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getUser</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mUserView</span><span class="o">.</span><span class="na">showProgressDialog</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 这里如果使用 Lambda 会更简洁</span>
</span><span class='line'>        <span class="n">mUserModel</span><span class="o">.</span><span class="na">getUser</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span><span class="c1">// 在非UI线程中执行getUser</span>
</span><span class='line'>                <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span><span class="c1">// 在UI线程中执行结果</span>
</span><span class='line'>                <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="n">Subscriber</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mUserView</span><span class="o">.</span><span class="na">updateView</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompleted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mUserView</span><span class="o">.</span><span class="na">hideProgressDialog</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mUserView</span><span class="o">.</span><span class="na">showError</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                        <span class="n">mUserView</span><span class="o">.</span><span class="na">hideProgressDialog</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于微信小程序的一些看法]]></title>
    <link href="http://chendd.github.io/blog/2016/09/27/about_wechat_littleapp/"/>
    <updated>2016-09-27T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2016/09/27/about_wechat_littleapp</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;自从微信9.21公布小程序内侧，这几天各大网站论坛都在如火如荼的讨论。腾讯想做微信生态的想法已是路人皆知，但有能不能做大做好还是未知数，像腾讯之前推出的web qq桌面也是火了几天，后来又归于平静。此番腾讯在微信身上推出的小程序又有点类似百度之前推出的轻应用，即通过web的形式在微信内部打开，不需要下载安装，即开即用，不用就关闭。</p>

<p>&#160; &#160; &#160; &#160;出于好奇根据微信官方的教程，搭了个hello world demo看了下，简直就是把webapp用微信打开的样子，内部还是基于webview实现的，只不过微信把他们封装了，方便调用微信相关接口进行用户管理。虽然webapp这些年一直在改进优化，但其本身的缺陷还是比较明显的，微信小程序还是拜托不了webapp的劣根性。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;我并不看好小程序的发展，结算发展好了，势必会触及苹果的利益，让其在app store下架，就像当年阿里云 的推出遭谷歌的反对一样。还有就是小程序的入口过深，完全依赖微信，受制于腾讯，相信其他巨头不可能将相应的产品也搬到微信小程序上。最后，身为android、ios原生开发者可能会担心微信小程序导致原生需求量的减少，进而影响失业的，我觉得如果小程序真的发展到那个地步，我们也可以学学小程序开发嘛，估计以后web前端的技能也是移动开发者的必备，再不济赶紧买点腾讯的股票做对冲(手动滑稽)</p>

<p>最后附上小程序的github awesome <a href="https://github.com/Aufree/awesome-wechat-weapp">https://github.com/Aufree/awesome-wechat-weapp</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Hook框架Xposed进阶]]></title>
    <link href="http://chendd.github.io/blog/2016/05/17/advanced_xposed/"/>
    <updated>2016-05-17T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2016/05/17/advanced_xposed</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;上一篇<a href="http://chendd.com/blog/2016/05/15/learn_xposed/">《Android Hook框架Xposed入门》</a>，我们对xposed进行简单的介绍并hook自己写的登录app。这次我们对xposed进行深入的了解并hook系统应用和第三方应用。</p>

<h2>一.API说明</h2>

<ul>
<li>IXposedHookLoadPackage.java

<ul>
<li>方法: handleLoadPackage,这个方法用于在加载应用程序的包的时候执行用户的操作</li>
<li>参数说明: final LoadPackageParam lpparam 这个参数包含了加载的应用程序的一些基本信息</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>XposedHelpers.java

<ul>
<li>方法: findAndHookMethod,这是一个辅助方法，可以通过静态导入使用</li>
<li>参数说明: findAndHookMethod(Class&lt;?> clazz, //需要 Hook 的类名ClassLoader，//类加载器，可以设置为 nullString methodName, //需要 Hook 的方法名 Object&hellip; parameterTypesAndCallback)该函数的最后一个参数集，包含了：
（1）Hook 的目标方法的参数,譬如："com.android.internal.policy.impl.PhoneWindow.DecorView"是方法的参数的类。
（2）回调方法：a.XC_MethodHook b.XC_MethodReplacement</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li>XposedBridge.java

<ul>
<li>无参方法: log,该方法可以将 log 信息以及 Throwable 抛出的异常信息输出到标准的logcat 以及/data/xposed/debug.log 这个文件中</li>
<li>无参方法: hookAllMethods/hookAllConstructors，该方法可以用来 hook 某个类中的所有方法或者构造函数，但是不同的Rom（非Android原生 Rom）会有不同的变种。</li>
</ul>
</li>
</ul>


<!--more-->


<h2>二.Hook/Replace</h2>

<p>&#160; &#160; &#160; &#160;Xposed 框架中真正起作用的是对方法的hook，那么寻找正确的目标方法名和所在的类名就很关键了。一般寻找目标方法有两种方法：</p>

<ul>
<li>直接在 AOSP 中查看</li>
</ul>


<p>&#160; &#160; &#160; &#160;这种是针对系统应用，要hook修改系统层面的东西，就可以通过查看google官方开放的源码来查看相应的接口。</p>

<ul>
<li>反编译目标程序，查看Smali代码。</li>
</ul>


<p>&#160; &#160; &#160; &#160;这种是针对第三方应用，常见的反编译工具有apktool，反编译后可以得到jar或者得到smali文件。Android采用的是java语言 进行开发，但是Android系统有自己的虚拟机Dalvik,代码编译最终不是采用的java的class，而是使用的smali。对于jar文件，我们可以使用jd-gui来查看源码，但是jar的话可能很多地方无法正确的解释出来，如果我们反编译的是smali则可以正确的理解程序的意思。smali类似汇编的形式，不熟悉smali语法，我们可以用smail2java工具进行转化，就可以通过java查找相应要hook的方法名信息。</p>

<h2>三.Hook系统应用</h2>

<p>&#160; &#160; &#160; &#160;这节简单讲讲hook系统应用来修改IMEI(设备信息)。APP获取IMEI是通过代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TelephonyManager</span> <span class="n">tm</span> <span class="o">=</span> <span class="o">(</span><span class="n">TelephonyManager</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">TELEPHONY_SERVICE</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">IMEI</span><span class="o">=</span> <span class="n">tm</span><span class="o">.</span><span class="na">getDeviceId</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>通过上述接口获取的，我们首先hook住TelephonyManager类的方法getDeviceId()，修改返回结果为"00000000000000" 这样无效的IMEI。</p>

<p>主入口HookUtil代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HookUtil</span> <span class="kd">implements</span> <span class="n">IXposedHookLoadPackage</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleLoadPackage</span><span class="o">(</span><span class="n">LoadPackageParam</span> <span class="n">lpparam</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span><span class="o">{</span>
</span><span class='line'>        <span class="n">HookMethod</span><span class="o">(</span><span class="n">TelephonyManager</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;getDeviceId&quot;</span><span class="o">,</span> <span class="s">&quot;00000000000000&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">HookMethod</span><span class="o">(</span><span class="kd">final</span> <span class="n">Class</span> <span class="n">clazz</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">method</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">result</span><span class="o">){</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>            <span class="n">XposedHelpers</span><span class="o">.</span><span class="na">findAndHookMethod</span><span class="o">(</span><span class="n">clazz</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="k">new</span> <span class="nf">XC_MethodHook</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">afterHookedMethod</span><span class="o">(</span><span class="n">MethodHookParam</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">param</span><span class="o">.</span><span class="na">setResult</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;写个简单获取IMEI例子测试是否hook成功。未激活插件时获取IMEI的值：</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/11.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;激活插件再获取IMEI的值，发现已经修改成功</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/12.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;既然能够修改IMEI，那么其他手机信息也可以依瓢画葫芦进行修改，只要知道返回这些信息的相应接口。</p>

<h2>四.Hook第三方应用</h2>

<p>&#160; &#160; &#160; &#160;接下来我们尝试hook第三方应用微信。微信是这几年很火的聊天软件，聊天的内容不局限文字、语音、图片&hellip;&hellip;微信中还可以掷骰子和猜拳互动是比较娱乐性的功能。</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/13.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;如果能够hook微信里面的骰子和猜拳接口，那么我们就尝试基于Xspoed的微信猜拳、骰子点数作弊插件。保证每次掷出来的骰子或者猜拳出的是我们想要的结果。</p>

<p>&#160; &#160; &#160; &#160;由于微信版本众多，每个版本发布前都经过proguard混淆打包，导致相同接口每个版本的接口名不一致，但是相同版本在不同机器的接口保证唯一，我们这次用6.3.9 for Android也就是weixin_700版本进行hook，其它版本同理也可以hook。</p>

<p>&#160; &#160; &#160; &#160;根据网上大神反编译微信源码分析，掷骰子和猜拳的接口在com.tencent.mm.sdk.platformtools.bb类的
pu方法中</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/14.png" alt="image" /></p>

<p>由代码我们可以分析出，掷骰子和猜拳的结果是本地取随机数来控制，当传入int paramInt = 2时，代表猜拳的接口，随机返回0，1，2三个随机数分别代表"剪刀", &ldquo;石头&rdquo;, &ldquo;布"。当传入int paramInt = 5时，代表掷骰子的接口，随机返回0~5六个随机数分别代表1~6的点数。</p>

<p>那么我们就可以编写HookUtil的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">findAndHookMethod</span><span class="o">(</span><span class="s">&quot;com.tencent.mm.sdk.platformtools.bb&quot;</span><span class="o">,</span> <span class="n">lpparam</span><span class="o">,</span> <span class="s">&quot;pu&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">findAndHookMethod</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">,</span> <span class="kd">final</span> <span class="n">LoadPackageParam</span> <span class="n">lpparam</span><span class="o">,</span> <span class="n">String</span> <span class="n">methodName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">XposedHelpers</span><span class="o">.</span><span class="na">findAndHookMethod</span><span class="o">(</span><span class="n">className</span><span class="o">,</span> <span class="n">lpparam</span><span class="o">.</span><span class="na">classLoader</span><span class="o">,</span> <span class="n">methodName</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">XC_MethodReplacement</span><span class="o">()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">replaceHookedMethod</span><span class="o">(</span><span class="n">MethodHookParam</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">gameType</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">param</span><span class="o">.</span><span class="na">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">switch</span> <span class="o">(</span><span class="n">gameType</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>              <span class="k">case</span> <span class="mi">5</span><span class="o">:</span> <span class="c1">// 摇骰子</span>
</span><span class='line'>                  <span class="n">Uri</span> <span class="n">diceUri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;content://com.example.hookdemo.provider/wx_plugs_setting&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">Cursor</span> <span class="n">diceCursor</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span><span class="n">diceUri</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">diceCursor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="k">while</span> <span class="o">(</span><span class="n">diceCursor</span><span class="o">.</span><span class="na">moveToNext</span><span class="o">())</span>
</span><span class='line'>                      <span class="o">{</span>
</span><span class='line'>                          <span class="n">diceCount</span> <span class="o">=</span> <span class="n">diceCursor</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">diceCursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="s">&quot;dice_num&quot;</span><span class="o">));</span>
</span><span class='line'>                          <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;查询获取骰子数为:&quot;</span> <span class="o">+</span> <span class="n">diceCount</span><span class="o">);</span>
</span><span class='line'>                      <span class="o">}</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                  
</span><span class='line'>              <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="c1">// 猜拳</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="n">Uri</span> <span class="n">morraUri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;content://com.example.hookdemo.provider/wx_plugs_setting&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">Cursor</span> <span class="n">morraCursor</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">query</span><span class="o">(</span><span class="n">morraUri</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">morraCursor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">{</span>
</span><span class='line'>                      <span class="k">while</span> <span class="o">(</span><span class="n">morraCursor</span><span class="o">.</span><span class="na">moveToNext</span><span class="o">())</span>
</span><span class='line'>                      <span class="o">{</span>
</span><span class='line'>                          <span class="n">diceCount</span> <span class="o">=</span> <span class="n">morraCursor</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">morraCursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="s">&quot;morra_num&quot;</span><span class="o">));</span>
</span><span class='line'>                          <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;查询猜拳数为:&quot;</span> <span class="o">+</span> <span class="n">morraNum</span><span class="o">);</span>
</span><span class='line'>                      <span class="o">}</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;replaceHookedMethod--函数返回值:&quot;</span> <span class="o">+</span> <span class="n">diceCount</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">diceCount</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;接下来我们编写保存设置想要点数和猜拳的并保存sqlite并通过ContentProvider提供统一的接口。当然也可以通过xposed提供的XSharedPreferences来做可能会更简单点。这样每次hook到请求返回骰子和猜拳结果就会根据我们每次保存的结果动态更改。</p>

<p>运行插件，点击【模块】，找到我们的插件勾选，并点击进行配置</p>

<p>设置摇出来的骰子点数为6点。</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/15.png" alt="image" /></p>

<p>设置猜拳出的是剪刀。</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/16.png" alt="image" /></p>

<p>重启激活插件，进入微信查看效果：</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/17.png" alt="image" /></p>

<p>重新进入模块配置界面，设置点数为1，猜拳为石头</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/18.png" alt="image" /></p>

<p>再进来微信查看是否生效</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/19.png" alt="image" /></p>

<p>有些人试验会不成功，可能是因为微信版本不是6.3.9导致接口名不一致，比如微信6.3.16的接口就为 com.tencent.mm.sdk.platformtools.ba的pT()方法。</p>

<p>我们可以根据当前微信的不同版本（微信历史版本可以在安智市场下载），hook相应的接口</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="k">case</span> <span class="s">&quot;6.3.5&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ClassName</span> <span class="o">=</span> <span class="s">&quot;com.tencent.mm.sdk.platformtools.ba&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">MethodName</span> <span class="o">=</span> <span class="s">&quot;or&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;6.3.7&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ClassName</span> <span class="o">=</span> <span class="s">&quot;com.tencent.mm.sdk.platformtools.bc&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">MethodName</span> <span class="o">=</span> <span class="s">&quot;oK&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;6.3.8&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ClassName</span> <span class="o">=</span> <span class="s">&quot;com.tencent.mm.sdk.platformtools.bc&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">MethodName</span> <span class="o">=</span> <span class="s">&quot;oZ&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;6.3.9&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ClassName</span> <span class="o">=</span> <span class="s">&quot;com.tencent.mm.sdk.platformtools.bb&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">MethodName</span> <span class="o">=</span> <span class="s">&quot;pu&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;6.3.11&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ClassName</span> <span class="o">=</span> <span class="s">&quot;com.tencent.mm.sdk.platformtools.ay&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">MethodName</span> <span class="o">=</span> <span class="s">&quot;pu&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;6.3.13&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ClassName</span> <span class="o">=</span> <span class="s">&quot;com.tencent.mm.sdk.platformtools.ay&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">MethodName</span> <span class="o">=</span> <span class="s">&quot;pu&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;6.3.15&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ClassName</span> <span class="o">=</span> <span class="s">&quot;com.tencent.mm.sdk.platformtools.ba&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">MethodName</span> <span class="o">=</span> <span class="s">&quot;pu&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;6.3.16&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ClassName</span> <span class="o">=</span> <span class="s">&quot;com.tencent.mm.sdk.platformtools.ba&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">MethodName</span> <span class="o">=</span> <span class="s">&quot;pT&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;看到这，有些骚年会动歪心思，是不是可以hook微信抢红包的接口来获利，你们真是too young，too simple。你们以为微信抢红包金额接口会从客户端随机取个数吗，明显是要服务端分配下发的，服务端要严格控制任何漏洞，不向骰子和猜拳是客户端产生各随机结果再发送到服务端同步给其它客户端。再者万一你们找到漏洞，这种涉及金钱的被发现是要被腾讯告抓去坐牢滴~</p>

<h2>五.总结</h2>

<p>&#160; &#160; &#160; &#160;通过介绍Xposed常用API接口，寻找hook的目标方法，以及演示分别hook系统应用和第三方应用的例子来进一步阐述Xposed的使用。可以看出Xposed的功能非常强大，可能有人会担心自己手机上的帐号密码或者钱财丢失，其实Xposed使用还是有些限制的，比如需要手机root权限，不好hook jni写的C语言接口。所有一般我们使用的手机尽量不要root，我们App关键接口尽量用jni的so库来实现。</p>

<p>附：</p>

<p>HookIMEI源码: <a href="https://github.com/chendd/Hook_IMEI.git">https://github.com/chendd/Hook_IMEI.git</a></p>

<p>Hook微信源码: <a href="https://github.com/chendd/WeChatHook.git">https://github.com/chendd/WeChatHook.git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Hook框架Xposed入门]]></title>
    <link href="http://chendd.github.io/blog/2016/05/15/learn_xposed/"/>
    <updated>2016-05-15T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2016/05/15/learn_xposed</id>
    <content type="html"><![CDATA[<h2>一.基础知识</h2>

<p>&#160; &#160; &#160; &#160;Xposed是Android平台上较为出名的一个开源框架。在这个框架下，我们可以加载很多插件App，这些插件App可以直接或间接操纵普通应用甚至系统上的东西。Xposed原理上是Hook Android 系统的核心进程Zygote来达到修改程序运行过程和结果。讲到这里，可能有人会问什么是Hook？什么是Zygote？</p>

<!--more-->


<ul>
<li><p>Hook(钩子)，钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。</p></li>
<li><p>Zygote(Android进程名)，Android系统是基于Linux内核的，而在Linux系统中，所有的进程都是init进程的子孙进程，也就是说，所有的进程都是直接或者间接地由init进程fork出来的。在Android系统中，所有的应用程序进程以及系统服务进程SystemServer都是由Zygote进程孕育（fork）出来的，这也许就是为什么要取名英文本意为受精卵的Zygote原因吧。</p></li>
</ul>


<p>&#160; &#160; &#160; &#160;由于Xposed框架Hook了Android的核心进程Zygote，而其他应用启动都是从Zygote进程fork而来，就够达到针对系统上所有的应用程序进程的Hook。</p>

<h2>二.Xposed简介</h2>

<ul>
<li><p>官网地址： <a href="http://repo.xposed.info/">http://repo.xposed.info/</a></p></li>
<li><p>源码地址： <a href="https://github.com/rovo89">https://github.com/rovo89</a></p></li>
</ul>


<p>&#160; &#160; &#160; &#160;rovo89大神github主页,如图所示</p>

<p>&#160; &#160; &#160; &#160;<img src="http://7arnbf.com1.z0.glb.clouddn.com/01.png" alt="image" /></p>

<p>主页大致可以看出，xposed主要由三个项目来组成的</p>

<ul>
<li>Xposed，Xposed的C++ 部分，主要是用来替换/system/bin/app_process，并为XposedBridge提供JNI方法</li>
<li>XposedBridge,Xposed 提供的jar文件，app_process启动过程中会加载该jar包，其他的Modules的开发都是基于该jar包</li>
<li>XposedInstaller,Xposed的安装包，提供对基于Xposed框架的Modules的管理</li>
</ul>


<p>xposed目前已逐步支持ART虚拟机，兼容android 5.0以上版本</p>

<h2>三.Xposed使用</h2>

<p>&#160; &#160; &#160; &#160;在Android 4.0以上Android设备（需root权限，建议直接用模拟器）安装<a href="http://repo.xposed.info/module/de.robv.android.xposed.installer">XposedInstaller</a></p>

<p>启动XposedInstaller点击 【框架】</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/02.png" alt="image" /></p>

<p>点击 【安装/更新】 并重启，再点击框架看到看到 激活底下两个都是绿色 代表框架安装成功</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/03.png" alt="image" /></p>

<p>我们可以点击【下载】来查看热门插件进行安装</p>

<p>安装完插件点击【模块】进行勾选激活</p>

<p>之后还需重启，插件才能生效。大家可以自己下载几个插件玩玩，本文重点不在这，就不演示了。</p>

<h2>四.编写插件</h2>

<p>这里我们hook自己编写的一个小的登录app来获取用户名密码。</p>

<p>界面比较简单，输入用户名密码点击登录弹出用户输入的密码</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/05.png" alt="image" /></p>

<p>界面代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">EditText</span> <span class="n">et_username</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// 属性为private 时普通反射获取不到该对象</span>
</span><span class='line'>  <span class="c1">// private  EditText et_password;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">EditText</span> <span class="n">et_password</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">Button</span> <span class="n">bt_login</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">et_username</span> <span class="o">=</span> <span class="o">(</span><span class="n">EditText</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">et_username</span><span class="o">);</span>
</span><span class='line'>      <span class="n">et_password</span> <span class="o">=</span> <span class="o">(</span><span class="n">EditText</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">et_password</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">bt_login</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">bt_login</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bt_login</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isCorrectInfo</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 校验用户名密码是否正确，直接返回true</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">bt_login</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">isCorrectInfo</span><span class="o">(</span><span class="n">et_username</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">et_password</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// 帐号密码校验成功，弹出当前密码</span>
</span><span class='line'>              <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="s">&quot;password:&quot;</span><span class="o">+</span><span class="n">et_password</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.在AndroidManifest.xml文件中配置</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;application</span>
</span><span class='line'>    <span class="na">android:allowBackup=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">android:icon=</span><span class="s">&quot;@drawable/ic_launcher&quot;</span>
</span><span class='line'>    <span class="na">android:label=</span><span class="s">&quot;@string/app_name&quot;</span>
</span><span class='line'>    <span class="na">android:theme=</span><span class="s">&quot;@style/AppTheme&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- 标记xposed插件 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta-data</span>
</span><span class='line'>        <span class="na">android:name=</span><span class="s">&quot;xposedmodule&quot;</span>
</span><span class='line'>        <span class="na">android:value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- 模块描述 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta-data</span>
</span><span class='line'>        <span class="na">android:name=</span><span class="s">&quot;xposeddescription&quot;</span>
</span><span class='line'>        <span class="na">android:value=</span><span class="s">&quot;登录hook例子！&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- 最低版本号 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta-data</span>
</span><span class='line'>        <span class="na">android:name=</span><span class="s">&quot;xposedminversion&quot;</span>
</span><span class='line'>        <span class="na">android:value=</span><span class="s">&quot;54&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.导入其jar包</h4>

<p>&#160; &#160; &#160; &#160;<a href="http://forum.xda-developers.com/xposed/xposed-api-changelog-developer-news-t2714067">XposedBridgeApi-.jar</a>，下载完毕后我们需要将Xposed Library复制到lib目录（注意是lib目录，不是Android提供的libs目录），然后将这个jar包添加到Build PATH中。</p>

<h4>3.声明主入口路径</h4>

<p>需要在assets文件夹中新建一个xposed_init的文件，并在其中声明主入口类。如这里我们的主入口类为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">xposedtest</span><span class="o">.</span><span class="na">HookUtil</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/04.png" alt="image" /></p>

<h4>4.使用findAndHookMethod方法Hook</h4>

<p>&#160; &#160; &#160; &#160;这是最重要的一步，我们之前所分析的都需要到这一步进行操作。如我们之前所分析的登陆程序，我们需要劫持，就是需要Hook其com.example.logintest.MainActivity中的isCorrectInfo方法。我们使用Xposed提供的findAndHookMethod直接进行MethodHook操作。在其Hook回调中使用XposedBridge.log方法，将登陆的账号密码信息打印至Xposed的日志中。具体操作如下所示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HookUtil</span> <span class="kd">implements</span> <span class="n">IXposedHookLoadPackage</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleLoadPackage</span><span class="o">(</span><span class="n">LoadPackageParam</span> <span class="n">lpparam</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 标记目标app包名</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">lpparam</span><span class="o">.</span><span class="na">packageName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;com.example.logintest&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;Loaded app: &quot;</span> <span class="o">+</span> <span class="n">lpparam</span><span class="o">.</span><span class="na">packageName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Hook MainActivity中的isCorrectInfo(String,String)方法</span>
</span><span class='line'>        <span class="c1">// findAndHookMethod(hook方法的类名，classLoader，hook方法名，hook方法参数...，XC_MethodHook)</span>
</span><span class='line'>        <span class="n">XposedHelpers</span><span class="o">.</span><span class="na">findAndHookMethod</span><span class="o">(</span><span class="s">&quot;com.example.logintest.MainActivity&quot;</span><span class="o">,</span> <span class="n">lpparam</span><span class="o">.</span><span class="na">classLoader</span><span class="o">,</span> <span class="s">&quot;isCorrectInfo&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">XC_MethodHook</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">beforeHookedMethod</span><span class="o">(</span><span class="n">MethodHookParam</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;开始hook&quot;</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;参数1 = &quot;</span> <span class="o">+</span> <span class="n">param</span><span class="o">.</span><span class="na">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>                        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;参数2 = &quot;</span> <span class="o">+</span> <span class="n">param</span><span class="o">.</span><span class="na">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">afterHookedMethod</span><span class="o">(</span><span class="n">MethodHookParam</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;结束hook&quot;</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;参数1 = &quot;</span> <span class="o">+</span> <span class="n">param</span><span class="o">.</span><span class="na">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>                        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;参数2 = &quot;</span> <span class="o">+</span> <span class="n">param</span><span class="o">.</span><span class="na">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.运行程序，查看效果</h4>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/06.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;重启Android设备，进入XposedInstaller点击【日志】查看，因为我们之前使用的是XposedBridge.log方法打印log，所以log都会显示在此处。我们发现我们需要劫持的账号密码都显示再来此处。</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/27.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;这里由于demo是我们自己写的，所以知道hook它的帐号校验方法isCorrectInfo来获取用户名密码，如果有些程序账户校验没有封装方法呢？其实我们可以hook其它一些必有的方法，如button的onClick方法，甚至可以动态改变EditText的内容，做法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HookUtil</span> <span class="kd">implements</span> <span class="n">IXposedHookLoadPackage</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleLoadPackage</span><span class="o">(</span><span class="n">LoadPackageParam</span> <span class="n">lpparam</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 标记目标app包名</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">lpparam</span><span class="o">.</span><span class="na">packageName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;com.example.logintest&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;Loaded app: &quot;</span> <span class="o">+</span> <span class="n">lpparam</span><span class="o">.</span><span class="na">packageName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Hook MainActivity中的onClick(View v)方法</span>
</span><span class='line'>        <span class="n">XposedHelpers</span><span class="o">.</span><span class="na">findAndHookMethod</span><span class="o">(</span><span class="s">&quot;com.example.logintest.MainActivity&quot;</span><span class="o">,</span> <span class="n">lpparam</span><span class="o">.</span><span class="na">classLoader</span><span class="o">,</span> <span class="s">&quot;onClick&quot;</span><span class="o">,</span> <span class="n">View</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">XC_MethodHook</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">beforeHookedMethod</span><span class="o">(</span><span class="n">MethodHookParam</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">afterHookedMethod</span><span class="o">(</span><span class="n">MethodHookParam</span> <span class="n">param</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">param</span><span class="o">.</span><span class="na">thisObject</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;class name:&quot;</span><span class="o">+</span><span class="n">clazz</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">Field</span> <span class="n">field</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getField</span><span class="o">(</span><span class="s">&quot;et_password&quot;</span><span class="o">);</span><span class="c1">// 密码输入框 id</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">EditText</span> <span class="n">password</span> <span class="o">=</span> <span class="o">(</span><span class="n">EditText</span><span class="o">)</span> <span class="n">field</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">param</span><span class="o">.</span><span class="na">thisObject</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">password</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">XposedBridge</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&quot;密码 = &quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">);</span>
</span><span class='line'>                        <span class="c1">// 设置新密码</span>
</span><span class='line'>                        <span class="n">password</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;改你妹啊!!&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/28.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;点击登录按钮，发现输入框内容改变了</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/09.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;之前登录app密码EditText声明为 private 时，导致反射获取报NoSuchFileException，原因是普通的反射不能获取私有变量，
改为EditText声明改为public后成功，或者不能改EditText声明时，可以用以下方法，无论公有私有都可以获取</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 输入框不为私有private 可通过以下方式获取 </span>
</span><span class='line'><span class="c1">// Field field = clazz.getField(&quot;et_password&quot;);// 密码输入框 id</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通过类的字节码得到该类中声明的所有属性，无论私有或公有</span>
</span><span class='line'><span class="n">Field</span> <span class="n">field</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;et_password&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 设置访问权限（这点对于有过android开发经验的可以说很熟悉）</span>
</span><span class='line'><span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4.总结</h2>

<p>&#160; &#160; &#160; &#160;既然能成功Hook自己的App，那么系统应用和其它应用的也同理，只不过需要知道系统公开接口或者反编译获得相应的接口，下次讲解Hook不是自己的应用做些好玩的东西。</p>

<p>附：</p>

<p>本文源码: <a href="https://github.com/chendd/XposedTest.git">https://github.com/chendd/XposedTest.git</a></p>

<p>官方教程: <a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial">https://github.com/rovo89/XposedBridge/wiki/Development-tutorial</a></p>

<p>官方例子: <a href="https://github.com/rovo89/XposedExamples">https://github.com/rovo89/XposedExamples</a></p>

<p>参考文章: <a href="http://www.csdn.net/article/1970-01-01/2825462">http://www.csdn.net/article/1970-01-01/2825462</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(五)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/22/learn_jni_5/"/>
    <updated>2016-04-22T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/22/learn_jni_5</id>
    <content type="html"><![CDATA[<p>注册native函数有两种方法：静态注册和动态注册。</p>

<h4>1、静态注册方法</h4>

<p>&#160; &#160; &#160; &#160;根据函数名找到对应的JNI函数:Java层调用函数时，会从对应的JNI中寻找该函数，如果没有就会报错，如果存在则会建立一个关联联系，以后在调用时会直接使用这个函数，这部分的操作由虚拟机完成。
静态方法就是根据函数名来遍历java和jni函数之间的关联，而且要求jni层函数的名字必须遵循
特定的格式，其缺点在于：</p>

<ul>
<li>1）javah生成的jni层函数特别长；</li>
<li>2）初次调用native函数时要根据名字搜索对应的jni层函数来建立关联联系，这样影响效率。</li>
</ul>


<!--more-->


<h4>2、动态注册方法</h4>

<p>&#160; &#160; &#160; &#160;JNI 允许你提供一个函数映射表，注册给Jave虚拟机，这样Jvm就可以用函数映射表来调用相应的函数，
就可以不必通过函数名来查找需要调用的函数了。
Java与JNI通过JNINativeMethod的结构来建立联系，它在jni.h中被定义，其结构内容如下：
typedef struct {
const char<em> name;
const char</em> signature;
void* fnPtr;
} JNINativeMethod;
第一个变量name是Java中函数的名字。
第二个变量signature，用字符串是描述了函数的参数和返回值
第三个变量fnPtr是函数指针，指向C函数。
当java通过System.loadLibrary加载完JNI动态库后，紧接着会查找一个JNI_OnLoad的函数，如果有，就调用它，
而动态注册的工作就是在这里完成的。</p>

<ul>
<li><p>1)JNI_OnLoad()函数
JNI_OnLoad()函数在VM执行System.loadLibrary(xxx)函数时被调用，它有两个重要的作用：
指定JNI版本：告诉VM该组件使用那一个JNI版本(若未提供JNI_OnLoad()函数，VM会默认该使用最老的JNI 1.1版)，如果要使用新版本的JNI，
例如JNI 1.4版，则必须由JNI_OnLoad()函数返回常量JNI_VERSION_1_4(该常量定义在jni.h中) 来告知VM。
初始化设定，当VM执行到System.loadLibrary()函数时，会立即先呼叫JNI_OnLoad()方法，因此在该方法中进行各种资源的初始化操作最为恰当，</p></li>
<li><p>2)RegisterNatives
RegisterNatives在AndroidRunTime里定义
syntax:
jint RegisterNatives(jclass clazz, const JNINativeMethod* methods,jint nMethods)</p></li>
</ul>


<h4>3、在android中加入自定义的native函数</h4>

<p>JNI在Android层次结构中的作用如下图所示:</p>

<p><img src="http://s5.sinaimg.cn/mw690/4ad7c254gx6DrPFbSBK14&amp;690?_=5355241" alt="image" /></p>

<p>在Android中，主要的JNI代码在以下的路径中:
Android源码根目录/frameworks/base/core/jni/
这个路径中的内容将被编译成库libandroid_runtime.so,这就是一个普通的动态库，被放置在目标系统的/system/lib目录中.除此之外，Android还包含其他的JNI库，例如,媒体部分的JNI目录frameworks/base/media/jni/中，被编译成库libmedia_jni.so.
JNI中的各个文件实际上就是C++的普通文件，其命名一般和支持的Java类有对应关系。
这种关系是习惯上的写法，而不是强制的。</p>

<ul>
<li>1）注册JNI方法</li>
</ul>


<p>在Android源码根目录/frameworks/base/services/jni/目录下有一个onload.cpp文件，加入 jni函数申明和jni函数注册方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &quot;JNIHelp.h&quot;   </span>
</span><span class='line'><span class="cp">#include &quot;jni.h&quot;   </span>
</span><span class='line'><span class="cp">#include &quot;utils/Log.h&quot;   </span>
</span><span class='line'><span class="cp">#include &quot;utils/misc.h&quot;   </span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="n">android</span> <span class="p">{</span>
</span><span class='line'><span class="kt">int</span> <span class="n">register_android_server_AlarmManagerService</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_BatteryService</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_InputApplicationHandle</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_InputWindowHandle</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_InputManager</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_LightsService</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_PowerManagerService</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_UsbDeviceManager</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_UsbHostManager</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_VibratorService</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_SystemServer</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_location_GpsLocationProvider</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_connectivity_Vpn</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_HelloService</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">);</span>  <span class="c1">//此处加入自定义jni函数申明</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">android</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="n">jint</span> <span class="n">JNI_OnLoad</span><span class="p">(</span><span class="n">JavaVM</span><span class="o">*</span> <span class="n">vm</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">reserved</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jint</span> <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">vm</span><span class="o">-&gt;</span><span class="n">GetEnv</span><span class="p">((</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">env</span><span class="p">,</span> <span class="n">JNI_VERSION_1_4</span><span class="p">)</span> <span class="o">!=</span> <span class="n">JNI_OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;GetEnv failed!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">LOG_ASSERT</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;Could not retrieve the env!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">register_android_server_PowerManagerService</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_InputApplicationHandle</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_InputWindowHandle</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_InputManager</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_LightsService</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_AlarmManagerService</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_BatteryService</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_UsbDeviceManager</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_UsbHostManager</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_VibratorService</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_SystemServer</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_location_GpsLocationProvider</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_connectivity_Vpn</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">register_android_server_HelloService</span><span class="p">(</span><span class="n">env</span><span class="p">);</span> <span class="c1">//jni方法注册</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">JNI_VERSION_1_4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>onload.cpp文件上部分为注册函数的声明，下部分为调用各种注册函数，而这些注册函数就是JNI方法的注册函数! 正是通过这些注册函数，上层才能调用注册的JNI方法.
以register_android_server_HelloService为例，来看一个注册函数的具体实现过程是如何的。
打开com_android_service_HelloService.cpp文件</p>

<ul>
<li>2)加入注册函数的实现代码，如下:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">register_android_server_HelloService</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jniRegisterNativeMethods</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;com/android/server/HelloService&quot;</span><span class="p">,</span> <span class="n">method_table</span><span class="p">,</span> <span class="n">NELEM</span><span class="p">(</span><span class="n">method_table</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中jniRegisterNativeMethods为注册JNI方法函数，
此函数的第二个参数为对应着java类即HelloService.java的文件名，第三个参数为注册的方法表</p>

<ul>
<li>3)加入jni方法表</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">JNINativeMethod</span> <span class="n">method_table</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;init_native&quot;</span><span class="p">,</span> <span class="s">&quot;()Z&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">hello_init</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;setVal_native&quot;</span><span class="p">,</span> <span class="s">&quot;(I)V&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">hello_setVal</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;getVal_native&quot;</span><span class="p">,</span> <span class="s">&quot;()I&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">hello_getVal</span><span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>4）方法表内各个接口的实现代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">hello_setVal</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jint</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">val</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="n">LOGI</span><span class="p">(</span><span class="s">&quot;Hello JNI: set value %d to device.&quot;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="n">jint</span> <span class="nf">hello_getVal</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">clazz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LOGI</span><span class="p">(</span><span class="s">&quot;Hello JNI: get value %d from device.&quot;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="n">jboolean</span> <span class="nf">hello_init</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LOGI</span><span class="p">(</span><span class="s">&quot;Hello JNI: initializing......&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">namespace</span> <span class="n">android</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="nf">hello_setVal</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jint</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">val</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="n">LOGI</span><span class="p">(</span><span class="s">&quot;Hello JNI: set value %d to device.&quot;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">jint</span> <span class="nf">hello_getVal</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">clazz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LOGI</span><span class="p">(</span><span class="s">&quot;Hello JNI: get value %d from device.&quot;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'> <span class="k">static</span> <span class="n">jboolean</span> <span class="nf">hello_init</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LOGI</span><span class="p">(</span><span class="s">&quot;Hello JNI: initializing......&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="n">JNINativeMethod</span> <span class="n">method_table</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;init_native&quot;</span><span class="p">,</span> <span class="s">&quot;()Z&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">hello_init</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;setVal_native&quot;</span><span class="p">,</span> <span class="s">&quot;(I)V&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">hello_setVal</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;getVal_native&quot;</span><span class="p">,</span> <span class="s">&quot;()I&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">hello_getVal</span><span class="p">},</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'>   <span class="kt">int</span> <span class="nf">register_android_server_HelloService</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jniRegisterNativeMethods</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&quot;com/android/server/HelloService&quot;</span><span class="p">,</span> <span class="n">method_table</span><span class="p">,</span> <span class="n">NELEM</span><span class="p">(</span><span class="n">method_table</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(四)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/17/learn_jni_4/"/>
    <updated>2016-04-17T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/17/learn_jni_4</id>
    <content type="html"><![CDATA[<h2>一、jni调用java对象</h2>

<p>&#160; &#160; &#160; &#160;JNI提供的功能之一是在本地代码中使用Java对象。包括：创建一个java类对象和通过函数传递一个java对象。创建一个java类对象，首先需要得到得到使用FindClass/GetObjectClass函数得到该类，然后使用GetMethodID方法得到该类的方法id,然后调用该函数。 Java 和 Native 代码之间函数调用时，如果是简单类型，也就是内置类型，比如 int, char 等是值传递（pass by value），而其它 Java 对象都是引用传递（pass by reference），这些对象引用由 JVM 传给 Native 代码。</p>

<p>在本地方法中调用Java对象的方法的步骤：</p>

<ul>
<li>1）获取你需要访问的Java对象的类
FindClass通过传java中完整的类名来查找java的class
GetObjectClass通过传入jni中的一个java的引用来获取该引用的类型。
他们之间的区别是，前者要求你必须知道完整的类名，后者要求在Jni有一个类的引用。</li>
<li>2）获取MethodID,调用方法
GetMethodID 得到一个实例的方法的ID
GetStaticMethodID 得到一个静态方法的ID</li>
<li>3)获取对象的属性
GetFieldID 得到一个实例的域的ID
GetStaticFieldID 得到一个静态的域的ID
JNI通过ID识别域和方法，一个域或方法的ID是任何处理域和方法的函数的必须参数。</li>
</ul>


<!--more-->


<h2>二、jni中引用的java对象的生命周期</h2>

<p>&#160; &#160; &#160; &#160;Java对象做为引用被传递到本地方法中，所有这些Java对象的引用都有一个共同的父类型jobject(相当于java中的 Object类是所有类的父类一样)。 这些对象引用都有其生命周期。在JNI中对Java对象的引用根据生命周期分为:全局引用，局部引用、弱全局引用</p>

<ul>
<li><p>1、Local Reference 本地引用，
函数调用时传入jobject或者jni函数创建的jobejct，都是本地引用.
其特点就是一旦JNI层函数返回，jobject就被垃圾回收掉，所以需要注意其生命周期。可以强制调用DeleteLocalRef进行立即回收。
jstring pathStr = env->NewStringUTF(path)
&hellip;.
env->DeleteLocalRef(pathStr);</p></li>
<li><p>2、Global Reference 全局引用 ，这种对象如不主动释放，它永远都不会被垃圾回收
创建： env->NewGlobalRef(obj);
释放： env->DeleteGlobalRef(obj)
若要在某个 Native 代码返回后，还希望能继续使用 JVM 提供的参数, 或者是过程中调用 JNI 函数的返回值（比如 g_mid）， 则将该对象设为 global reference，以后只能使用这个 global reference；若不是一个 jobject，则无需这么做。</p></li>
<li><p>3、Weak Global Reference 弱全局引用
一种特殊的 Global Reference ,在运行过程中可能被垃圾回收掉，所以使用时请务必注意其生命周期及随时可能被垃圾回收掉,比如内存不足时。
使用前可以利用JNIEnv的 IsSameObject 进行判定它是否被回收
env->IsSameObject(obj1,obj2);</p></li>
</ul>


<h2>三、本地线程中调用java对象</h2>

<ul>
<li>问题1：
JNIEnv是一个线程相关的变量
JNIEnv 对于每个 thread 而言是唯一的
JNIEnv *env指针不可以为多个线程共用</li>
<li>解决办法：
但是java虚拟机的JavaVM指针是整个jvm公用的，我们可以通过JavaVM来得到当前线程的JNIEnv指针.
可以使用javaAttachThread保证取得当前线程的Jni环境变量
static JavaVM *gs_jvm=NULL;
gs_jvm->AttachCurrentThread((void **)&amp;env, NULL);//附加当前线程到一个Java虚拟机
jclass cls = env->GetObjectClass(gs_object);
jfieldID fieldPtr = env->GetFieldID(cls,&ldquo;value&rdquo;,&ldquo;I&rdquo;);</li>
<li>问题2：
不能直接保存一个线程中的jobject指针到全局变量中,然后在另外一个线程中使用它。</li>
<li>解决办法：
用env->NewGlobalRef创建一个全局变量，将传入的obj(局部变量)保存到全局变量中,其他线程可以使用这个全局变量来操纵这个java对象
注意：若不是一个 jobject，则不需要这么做。如：
jclass 是由 jobject public 继承而来的子类，所以它当然是一个 jobject，需要创建一个 global reference 以便日后使用。
而 jmethodID/jfieldID 与 jobject 没有继承关系，它不是一个 jobject，只是个整数，所以不存在被释放与否的问题，可保存后直接使用。
static jobject gs_object=NULL;
JNIEXPORT void JNICALL Java_Test_setEnev(JNIEnv *env, jobject obj)
{
  env->GetJavaVM(&amp;gs_jvm); //保存到全局变量中JVM
  //直接赋值obj到全局变量是不行的,应该调用以下函数:
  gs_object=env->NewGlobalRef(obj);
}</li>
</ul>


<p>jni部分代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;jni.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;android/log.h&gt;</span>
</span><span class='line'><span class="cp">#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, &quot;native-activity&quot;, __VA_ARGS__))</span>
</span><span class='line'><span class="cp">#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, &quot;native-activity&quot;, __VA_ARGS__))</span>
</span><span class='line'><span class="cp">#define LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR, &quot;native-activity&quot;, __VA_ARGS__))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//全局变量</span>
</span><span class='line'><span class="n">JavaVM</span> <span class="o">*</span><span class="n">g_jvm</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="n">jobject</span> <span class="n">g_obj</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">thread_fun</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'>     <span class="n">jclass</span> <span class="n">cls</span><span class="p">;</span>
</span><span class='line'>     <span class="n">jmethodID</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//Attach主线程</span>
</span><span class='line'>     <span class="k">if</span><span class="p">((</span><span class="o">*</span><span class="n">g_jvm</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">AttachCurrentThread</span><span class="p">(</span><span class="n">g_jvm</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">env</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">!=</span> <span class="n">JNI_OK</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>         <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;%s: AttachCurrentThread() failed&quot;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="c1">//找到对应的类</span>
</span><span class='line'>     <span class="n">cls</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetObjectClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">g_obj</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span><span class="p">(</span><span class="n">cls</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>         <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;FindClass() Error.....&quot;</span><span class="p">);</span>
</span><span class='line'>         <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="c1">//再获得类中的方法</span>
</span><span class='line'>     <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">cls</span><span class="p">,</span> <span class="s">&quot;fromJNI&quot;</span><span class="p">,</span> <span class="s">&quot;(I)V&quot;</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">mid</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>         <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;GetMethodID() Error.....&quot;</span><span class="p">);</span>
</span><span class='line'>         <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="c1">//最后调用java中的静态方法</span>
</span><span class='line'>         <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">CallVoidMethod</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">cls</span><span class="p">,</span> <span class="n">mid</span> <span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="nl">error</span><span class="p">:</span>
</span><span class='line'>     <span class="c1">//Detach主线程</span>
</span><span class='line'>     <span class="k">if</span><span class="p">((</span><span class="o">*</span><span class="n">g_jvm</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">DetachCurrentThread</span><span class="p">(</span><span class="n">g_jvm</span><span class="p">)</span> <span class="o">!=</span> <span class="n">JNI_OK</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>         <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;%s: DetachCurrentThread() failed&quot;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>     <span class="n">pthread_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//由java调用以创建子线程</span>
</span><span class='line'> <span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="nf">Java_com_test_JniThreadTestActivity_mainThread</span><span class="p">(</span> <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">threadNum</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>     <span class="kt">pthread_t</span><span class="o">*</span> <span class="n">pt</span><span class="p">;</span>
</span><span class='line'>     <span class="n">pt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">pthread_t</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">threadNum</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">pthread_t</span><span class="p">));</span>
</span><span class='line'>     <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">threadNum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>         <span class="c1">//创建子线程</span>
</span><span class='line'>        <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pt</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">thread_fun</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">threadNum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'><span class="n">pthread_join</span> <span class="p">(</span><span class="n">pt</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;main thread exit.....&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//由java调用来建立JNI环境</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="nf">Java_com_test_JniThreadTestActivity_setJNIEnv</span><span class="p">(</span> <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="c1">//保存全局JVM以便在子线程中使用</span>
</span><span class='line'>     <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetJavaVM</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="o">&amp;</span><span class="n">g_jvm</span><span class="p">);</span>
</span><span class='line'>     <span class="c1">//不能直接赋值(g_obj = obj)</span>
</span><span class='line'>     <span class="n">g_obj</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="c1">//当动态库被加载时这个函数被系统调用</span>
</span><span class='line'> <span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="nf">JNI_OnLoad</span><span class="p">(</span><span class="n">JavaVM</span> <span class="o">*</span><span class="n">vm</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">reserved</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>     <span class="n">jint</span> <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//获取JNI版本</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">vm</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetEnv</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">env</span><span class="p">,</span> <span class="n">JNI_VERSION_1_4</span><span class="p">)</span> <span class="o">!=</span> <span class="n">JNI_OK</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>         <span class="n">LOGE</span><span class="p">(</span><span class="s">&quot;GetEnv failed!&quot;</span><span class="p">);</span>
</span><span class='line'>             <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">return</span> <span class="n">JNI_VERSION_1_4</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要全部源码的,可以打开这个链接下载
<a href="http://download.csdn.net/detail/mfcai_blog/5772377">http://download.csdn.net/detail/mfcai_blog/5772377</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(三)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/12/learn_jni_3/"/>
    <updated>2016-04-12T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/12/learn_jni_3</id>
    <content type="html"><![CDATA[<h2>一、涉及到的jni编程知识</h2>

<p>&#160; &#160; &#160; &#160;Java基本类型的数组，在JNI中都是jArray的类型格式。具体类型如下：</br>
typedef jarray jbooleanArray;</br>
typedef jarray jbyteArray;</br>
typedef jarray jcharArray;</br>
typedef jarray jshortArray;</br>
typedef jarray jintArray;</br>
typedef jarray jlongArray;</br>
typedef jarray jfloatArray;</br>
typedef jarray jdoubleArray;</br>
typedef jarray jobjectArray;</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;jArray类型JNI定义的类型，通过它JNIEnv可以操作Java数组，但它并不是C/C++的数组，所以我们要把jArray类型转换为C/C++中的数组。
JNIEnv定义了一系列的方法来把一个jArray类型转换为C/C++数组，和把C/C++数组转换为jArray</p>

<h4>1、Java基本类型的数组转换成相应的C数组类型</h4>

<p>jboolean<em>   （</em>GetBooleanArrayElements）（JNIEnv<em>， jbooleanArray， jboolean</em>）;</br>
jbyte<em>      （</em>GetByteArrayElements）（JNIEnv<em>， jbyteArray， jboolean</em>）;</br>
jchar<em>      （</em>GetCharArrayElements）（JNIEnv<em>， jcharArray， jboolean</em>）;</br>
jshort<em>     （</em>GetShortArrayElements）（JNIEnv<em>， jshortArray， jboolean</em>）;</br>
jint<em>       （</em>GetIntArrayElements）（JNIEnv<em>， jintArray， jboolean</em>）;</br>
jlong<em>      （</em>GetLongArrayElements）（JNIEnv<em>， jlongArray， jboolean</em>）;</br>
jfloat<em>     （</em>GetFloatArrayElements）（JNIEnv<em>， jfloatArray， jboolean</em>）;</br>
jdouble<em>    （</em>GetDoubleArrayElements）（JNIEnv<em>， jdoubleArray， jboolean</em>);</br></p>

<p>参数：
env：JNI 接口指针。      <br/>
array：Java 字符串对象。      <br/>
isCopy：指向布尔值的指针。      <br/>
返回值：      <br/>
返回指向数组元素的指针，如果操作失败，则为 NULL。</p>

<h4>2、获取数组的长度:</h4>

<p>jsize       （<em>GetArrayLength）（JNIEnv</em>， jarray）;</br></p>

<h4>3、释放C/C++的数组内存</h4>

<p>void        （<em>ReleaseBooleanArrayElements）（JNIEnv</em>， jbooleanArray，jboolean<em>， jint）; </br>
void        （</em>ReleaseByteArrayElements）（JNIEnv<em>， jbyteArray，jbyte</em>， jint）;</br>
void        （<em>ReleaseCharArrayElements）（JNIEnv</em>， jcharArray，jchar<em>， jint）;</br>
void        （</em>ReleaseShortArrayElements）（JNIEnv<em>， jshortArray，jshort</em>， jint）;</br>
void        （<em>ReleaseIntArrayElements）（JNIEnv</em>， jintArray，jint<em>， jint）;</br>
void        （</em>ReleaseLongArrayElements）（JNIEnv<em>， jlongArray，jlong</em>， jint）;</br>
void        （<em>ReleaseFloatArrayElements）（JNIEnv</em>， jfloatArray，jfloat<em>， jint）;</br>
void        （</em>ReleaseDoubleArrayElements）（JNIEnv<em>， jdoubleArray，jdouble</em>， jint）;</br>
参数：      <br/>
env：JNI 接口指针。      <br/>
array：Java 数组对象。      <br/>
elems：指向数组元素的指针。      <br/>
mode：释放模式。</p>

<h4>4、构造一个指定长度的Java基本类型的数组</h4>

<p>jbooleanArray （<em>NewBooleanArray）（JNIEnv</em>， jsize）;</br>
jbyteArray    （<em>NewByteArray）（JNIEnv</em>， jsize）;</br>
jcharArray    （<em>NewCharArray）（JNIEnv</em>， jsize）;</br>
jshortArray   （<em>NewShortArray）（JNIEnv</em>， jsize）;</br>
jintArray     （<em>NewIntArray）（JNIEnv</em>， jsize）;</br>
jlongArray    （<em>NewLongArray）（JNIEnv</em>， jsize）;</br>
jfloatArray   （<em>NewFloatArray）（JNIEnv</em>， jsize）;</br>
jdoubleArray  （<em>NewDoubleArray）（JNIEnv</em>， jsize）; </br></p>

<h4>5、给java基本类型的数组赋值</h4>

<p>void  （<em>SetBooleanArrayRegion）（JNIEnv</em>， jbooleanArray，jsize， jsize， const jboolean<em>）;</br>
void  （</em>SetByteArrayRegion）（JNIEnv<em>， jbyteArray，jsize， jsize， const jbyte</em>）;</br>
void  （<em>SetCharArrayRegion）（JNIEnv</em>， jcharArray，jsize， jsize， const jchar<em>）;</br>
void  （</em>SetShortArrayRegion）（JNIEnv<em>， jshortArray，jsize， jsize， const jshort</em>）;</br>
void  （<em>SetIntArrayRegion）（JNIEnv</em>， jintArray，jsize， jsize， const jint<em>）;</br>
void  （</em>SetLongArrayRegion）（JNIEnv<em>， jlongArray，jsize， jsize， const jlong</em>）;</br>
void  （<em>SetFloatArrayRegion）（JNIEnv</em>， jfloatArray，jsize， jsize， const jfloat<em>）;</br>
void  （</em>SetDoubleArrayRegion）（JNIEnv<em>， jdoubleArray， jsize， jsize， const jdouble</em>）; </br>
把java基本类型的数组中的指定范围的元素用C/C++的数组中的元素来赋值
参数：      <br/>
env：JNI 接口指针。      <br/>
array:  Java 数组。      <br/>
start：起始下标。      <br/>
len：要复制的元素数。      <br/>
buf：源缓冲区。      <br/>
抛出：      <br/>
ArrayIndexOutOfBoundsException：如果区域中的某个下标无效。
注意：
如果是c程序，要用 (<em>env)->
如果是C++要用 env->
在linux下如果.c文件中用 “env->” 编译会找不到此结构，必须用“(</em>env)->”，或者改成.cpp文件，以 c++的方式来编译。
具体请看一下jni.h的代码。另外还有些省略的内容，可以参考JNI的文档：Java Native Interface 6.0 Specification，在JDK的文档里就可以找到。如果要进行更深入的JNI编程，需要仔细阅读这个文档</p>

<h2>二、图像灰度化</h2>

<p>&#160; &#160; &#160; &#160;彩色转灰度的著名心理学公式：Gray = R<em>0.299 + G</em>0.587 + B*0.114
实际应用中为了避免浮点运算，然后就有了移位运算代替了。
2至20位精度的系数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">1</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">1</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">5</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">1</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">2</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">9</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">19</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">4</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">19</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">37</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">8</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">38</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">75</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">15</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">76</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">150</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">30</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">153</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">300</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">59</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">9</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">306</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">601</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">117</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">10</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">612</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">1202</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">234</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">11</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">1224</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">2405</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">467</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">2449</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">4809</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">934</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">13</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">4898</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">9618</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">1868</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">14</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">9797</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">19235</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">3736</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">15</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">19595</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">38469</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">7472</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">39190</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">76939</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">14943</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">17</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">78381</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">153878</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">29885</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">18</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">156762</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">307757</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">59769</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">19</span>
</span><span class='line'><span class="n">Gray</span> <span class="o">=</span> <span class="o">(</span><span class="n">R</span><span class="o">*</span><span class="mi">313524</span> <span class="o">+</span> <span class="n">G</span><span class="o">*</span><span class="mi">615514</span> <span class="o">+</span> <span class="n">B</span><span class="o">*</span><span class="mi">119538</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三、灰度化代码实现</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jintArray</span> <span class="n">JNICALL</span> <span class="nf">Java_org_join_image_util_JoinImage_imgToGray</span><span class="o">(</span>
</span><span class='line'>        <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="o">,</span> <span class="n">jintArray</span> <span class="n">buf</span><span class="o">,</span> <span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="kt">int</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LOGE</span><span class="o">(</span><span class="s">&quot;==imgToGray==&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">jint</span> <span class="o">*</span> <span class="n">cbuf</span><span class="o">;</span>
</span><span class='line'>    <span class="n">cbuf</span> <span class="o">=</span> <span class="o">(*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">GetIntArrayElements</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span> <span class="c1">// 获取int数组元素 </span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mh">0xFF</span><span class="o">;</span> <span class="c1">// 不透明值 </span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">color</span><span class="o">,</span> <span class="n">red</span><span class="o">,</span> <span class="n">green</span><span class="o">,</span> <span class="n">blue</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">h</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">w</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">color</span> <span class="o">=</span> <span class="n">cbuf</span><span class="o">[</span><span class="n">w</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">];</span> <span class="c1">// 获得color值 </span>
</span><span class='line'>            <span class="n">red</span> <span class="o">=</span> <span class="o">(</span><span class="n">color</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">;</span> <span class="c1">// 获得red值 </span>
</span><span class='line'>            <span class="n">green</span> <span class="o">=</span> <span class="o">(</span><span class="n">color</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">;</span> <span class="c1">// 获得green值 </span>
</span><span class='line'>            <span class="n">blue</span> <span class="o">=</span> <span class="n">color</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">;</span> <span class="c1">// 获得blue值 </span>
</span><span class='line'>            <span class="n">color</span> <span class="o">=</span> <span class="o">(</span><span class="n">red</span> <span class="o">*</span> <span class="mi">38</span> <span class="o">+</span> <span class="n">green</span> <span class="o">*</span> <span class="mi">75</span> <span class="o">+</span> <span class="n">blue</span> <span class="o">*</span> <span class="mi">15</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="o">;</span> <span class="c1">// 灰度算法（16位运算下7位精度） </span>
</span><span class='line'>            <span class="n">color</span> <span class="o">=</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="o">)</span> <span class="o">|</span> <span class="o">(</span><span class="n">color</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="o">)</span> <span class="o">|</span> <span class="o">(</span><span class="n">color</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">|</span> <span class="n">color</span><span class="o">;</span> <span class="c1">// 由ARGB组成新的color值 </span>
</span><span class='line'>            <span class="n">cbuf</span><span class="o">[</span><span class="n">w</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">color</span><span class="o">;</span> <span class="c1">// 设置新color值 </span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">w</span> <span class="o">*</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>    <span class="n">jintArray</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">NewIntArray</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span> <span class="c1">// 新建一个jintArray </span>
</span><span class='line'>    <span class="o">(*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">SetIntArrayRegion</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">cbuf</span><span class="o">);</span> <span class="c1">// 将cbuf转存入result </span>
</span><span class='line'>    <span class="o">(*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">cbuf</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span> <span class="c1">// 释放int数组元素 </span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(二)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/09/learn_jni_2/"/>
    <updated>2016-04-09T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/09/learn_jni_2</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等。要掌握jni，就必须熟练掌握Android.mk的语法规范。</p>

<!--more-->


<h2>一、Android.mk文件的用途</h2>

<p>&#160; &#160; &#160; &amp;#160一个android子项目中会存在一个或多个Android.mk文件</p>

<h4>1、单一的Android.mk文件</h4>

<p>直接参考NDK的sample目录下的hello-jni项目，在这个项目中只有一个Android.mk文件</p>

<h4>2、多个Android.mk文件</h4>

<p>如果需要编译的模块比较多，我们可能会将对应的模块放置在相应的目录中，
这样，我们可以在每个目录中定义对应的Android.mk文件（类似于上面的写法），
最后，在根目录放置一个Android.mk文件，内容如下：
include $(call all-subdir-makefiles)
只需要这一行就可以了，它的作用就是包含所有子目录中的Android.mk文件</p>

<h4>3、多个模块共用一个Android.mk</h4>

<p>这个文件允许你将源文件组织成模块，这个模块中含有：
  -静态库(.a文件)
  -动态库(.so文件)
只有共享库才能被安装/复制到您的应用软件（APK）包中
include $(BUILD_STATIC_LIBRARY)，编译出的是静态库
include $(BUILD_SHARED_LIBRARY)，编译出的是动态库</p>

<h2>二、自定义变量</h2>

<p> 以下是在 Android.mk中依赖或定义的变量列表，可以定义其他变量为自己使用，但是NDK编译系统保留下列变量名：</p>

<ul>
<li>以 LOCAL_开头的名字（例如 LOCAL_MODULE）</li>
<li>以 PRIVATE<em>, NDK</em> 或 APP_开头的名字（内部使用）</li>
<li>小写名字（内部使用，例如‘my-dir’）</li>
</ul>


<p>  如果为了方便在 Android.mk 中定义自己的变量，建议使用 MY_前缀，一个小例子：
MY_SOURCES := foo.c
ifneq ($(MY_CONFIG_BAR),)
 MY_SOURCES += bar.c
endif
LOCAL_SRC_FILES += $(MY_SOURCES)
注意：‘:=’是赋值的意思；'+=&lsquo;是追加的意思；‘$’表示引用某变量的值。</p>

<h2>三、GNU Make系统变量</h2>

<p>  这些 GNU Make变量在你的 Android.mk 文件解析之前，就由编译系统定义好了。注意在某些情况下，NDK可能分析 Android.mk 几次，每一次某些变量的定义会有不同。</p>

<ul>
<li><p>1、CLEAR_VARS:
指向一个编译脚本，几乎所有未定义的 LOCAL_XXX 变量都在"Module-description"节中列出。必须在开始一个新模块之前包含这个脚本：include$(CLEAR_VARS)，用于重置除LOCAL_PATH变量外的，所有LOCAL_XXX系列变量。</p></li>
<li><p>2、BUILD_SHARED_LIBRARY:<br/>
指向编译脚本，根据所有的在 LOCAL_XXX 变量把列出的源代码文件编译成一个共享库。
     注意，必须至少在包含这个文件之前定义 LOCAL_MODULE 和 LOCAL_SRC_FILES。</p></li>
<li>3、BUILD_STATIC_LIBRARY:
一个 BUILD_SHARED_LIBRARY 变量用于编译一个静态库。静态库不会复制到的APK包中，但是能够用于编译共享库。
     示例：include $(BUILD_STATIC_LIBRARY)
     注意，这将会生成一个名为 lib$(LOCAL_MODULE).a 的文件</li>
<li><p>4、TARGET_ARCH:
目标 CPU平台的名字</p></li>
<li><p>5、TARGET_PLATFORM:
Android.mk 解析的时候，目标 Android 平台的名字.详情可考/development/ndk/docs/stable- apis.txt.
     android-3 -> Official Android 1.5 system images
     android-4 -> Official Android 1.6 system images
     android-5 -> Official Android 2.0 system images</p></li>
<li>6、TARGET_ARCH_ABI:<br/>
暂时只支持两个 value，armeabi 和 armeabi-v7a。。</li>
<li>7、TARGET_ABI:
目标平台和 ABI 的组合，</li>
</ul>


<h2>四、模块描述变量</h2>

<p>  下面的变量用于向编译系统描述你的模块。应该定义在'include  $(CLEAR_VARS)&lsquo;和'include $(BUILD_XXXXX)'之间。$(CLEAR_VARS)是一个脚本，清除所有这些变量。</p>

<ul>
<li><p>1、LOCAL_PATH:<br/>
这个变量用于给出当前文件的路径。
必须在 Android.mk 的开头定义，可以这样使用：LOCAL_PATH := $(call my-dir)
如当前目录下有个文件夹名称 src，则可以这样写 $(call src)，那么就会得到 src 目录的完整路径
这个变量不会被$(CLEAR_VARS)清除，因此每个 Android.mk 只需要定义一次(即使在一个文件中定义了几个模块的情况下)。</p></li>
<li><p>2、LOCAL_MODULE:
这是模块的名字，它必须是唯一的，而且不能包含空格。
必须在包含任一的$(BUILD_XXXX)脚本之前定义它。模块的名字决定了生成文件的名字。</p></li>
<li><p>3、LOCAL_SRC_FILES:
这是要编译的源代码文件列表。
只要列出要传递给编译器的文件，因为编译系统自动计算依赖。注意源代码文件名称都是相对于 LOCAL_PATH的，你可以使用路径部分，例如：
LOCAL_SRC_FILES := foo.c toto/bar.c\Hello.c
文件之间可以用空格或Tab键进行分割,换行请用"\&ldquo;
如果是追加源代码文件的话，请用LOCAL_SRC_FILES +=
注意：可以LOCAL_SRC_FILES := $(call all-subdir-java-files)这种形式来包含local_path目录下的所有java文件。</p></li>
<li><p>4、LOCAL_C_INCLUDES:<br/>
可选变量，表示头文件的搜索路径。
默认的头文件的搜索路径是LOCAL_PATH目录。</p></li>
<li><p>5、LOCAL_STATIC_LIBRARIES:
表示该模块需要使用哪些静态库，以便在编译时进行链接。</p></li>
<li><p>6、LOCAL_SHARED_LIBRARIES:<br/>
表示模块在运行时要依赖的共享库（动态库），在链接时就需要，以便在生成文件时嵌入其相应的信息。
注意：它不会附加列出的模块到编译图，也就是仍然需要在Application.mk 中把它们添加到程序要求的模块中。</p></li>
<li><p>7、LOCAL_LDLIBS:<br/>
编译模块时要使用的附加的链接器选项。这对于使用‘-l’前缀传递指定库的名字是有用的。
例如，LOCAL_LDLIBS := -lz表示告诉链接器生成的模块要在加载时刻链接到/system/lib/libz.so
可查看 docs/STABLE-APIS.TXT 获取使用 NDK发行版能链接到的开放的系统库列表。</p></li>
<li><p>8、LOCAL_MODULE_PATH 和 LOCAL_UNSTRIPPED_PATH
在 Android.mk 文件中， 还可以用LOCAL_MODULE_PATH 和LOCAL_UNSTRIPPED_PATH指定最后的目标安装路径.
不同的文件系统路径用以下的宏进行选择：
TARGET_ROOT_OUT：表示根文件系统。
TARGET_OUT：表示 system文件系统。
TARGET_OUT_DATA：表示 data文件系统。
用法如：LOCAL_MODULE_PATH :=$(TARGET_ROOT_OUT)
至于LOCAL_MODULE_PATH 和LOCAL_UNSTRIPPED_PATH的区别，暂时还不清楚。</p></li>
<li><p>9、LOCAL_JNI_SHARED_LIBRARIES：
定义了要包含的so库文件的名字，如果程序没有采用jni，不需要
      LOCAL_JNI_SHARED_LIBRARIES := libxxx 这样在编译的时候，NDK自动会把这个libxxx打包进apk； 放在youapk/lib/目录下</p></li>
</ul>


<h2>五、NDK提供的函数宏</h2>

<p>GNU Make函数宏，必须通过使用'$(call  )&lsquo;来调用，返回值是文本化的信息。</p>

<ul>
<li><p>1、my-dir:返回当前 Android.mk 所在的目录的路径，相对于 NDK 编译系统的顶层。这是有用的，在 Android.mk 文件的开头如此定义：LOCAL_PATH := $(call my-dir)</p></li>
<li><p>2、all-subdir-makefiles: 返回一个位于当前'my-dir'路径的子目录中的所有Android.mk的列表。
     例如，某一子项目的目录层次如下：
          src/foo/Android.mk
          src/foo/lib1/Android.mk
          src/foo/lib2/Android.mk
    如果 src/foo/Android.mk 包含一行：
         include $(call all-subdir-makefiles)
    那么它就会自动包含 src/foo/lib1/Android.mk 和 src/foo/lib2/Android.mk。
    这项功能用于向编译系统提供深层次嵌套的代码目录层次。
    注意，在默认情况下，NDK 将会只搜索在 src/*/Android.mk 中的文件。</p></li>
<li>3、this-makefile:  返回当前Makefile 的路径(即这个函数调用的地方)</li>
<li>4、parent-makefile:  返回调用树中父 Makefile 路径。即包含当前Makefile的Makefile 路径。</li>
<li>5、grand-parent-makefile：返回调用树中父Makefile的父Makefile的路径</li>
</ul>


<h2>六、 Android.mk示例</h2>

<h4>编译静态库</h4>

<p>LOCAL_PATH := $(call my-dir)</br>
include $(CLEAR_VARS)</br>
LOCAL_MODULE = libhellos</br>
LOCAL_CFLAGS = $(L_CFLAGS)</br>
LOCAL_SRC_FILES = hellos.c</br>
LOCAL_C_INCLUDES = $(INCLUDES)</br>
LOCAL_SHARED_LIBRARIES := libcutils</br>
LOCAL_COPY_HEADERS_TO := libhellos</br>
LOCAL_COPY_HEADERS := hellos.h</br>
include $(BUILD_STATIC_LIBRARY)</p>

<h4>编译动态库</h4>

<p>LOCAL_PATH := $(call my-dir)</br>
include $(CLEAR_VARS)</br>
LOCAL_MODULE = libhellod</br>
LOCAL_CFLAGS = $(L_CFLAGS)</br>
LOCAL_SRC_FILES = hellod.c</br>
LOCAL_C_INCLUDES = $(INCLUDES)</br>
LOCAL_SHARED_LIBRARIES := libcutils</br>
LOCAL_COPY_HEADERS_TO := libhellod</br>
LOCAL_COPY_HEADERS := hellod.h</br>
include $(BUILD_SHARED_LIBRARY)</p>

<h4>使用静态库</h4>

<p>LOCAL_PATH := $(call my-dir)</br>
include $(CLEAR_VARS)</br>
LOCAL_MODULE := hellos</br>
LOCAL_STATIC_LIBRARIES := libhellos</br>
LOCAL_SHARED_LIBRARIES :=</br>
LOCAL_LDLIBS += -ldl</br>
LOCAL_CFLAGS := $(L_CFLAGS)</br>
LOCAL_SRC_FILES := mains.c</br>
LOCAL_C_INCLUDES := $(INCLUDES)</br>
include $(BUILD_EXECUTABLE)</p>

<h4>使用动态库</h4>

<p>LOCAL_PATH := $(call my-dir)</br>
include $(CLEAR_VARS)</br>
LOCAL_MODULE := hellod</br>
LOCAL_MODULE_TAGS := debug</br>
LOCAL_SHARED_LIBRARIES := libc libcutils libhellod</br>
LOCAL_LDLIBS += -ldl</br>
LOCAL_CFLAGS := $(L_CFLAGS)</br>
LOCAL_SRC_FILES := maind.c</br>
LOCAL_C_INCLUDES := $(INCLUDES)</br>
include $(BUILD_EXECUTABLE)</p>

<p>Android.mk给变量赋值，同时用的“:=”和“=”，他们分别代表什么意思呢？</p>

<p>“:=” 的意思是，它右边赋得值如果是变量，只能使用在这条语句之前定义好的，而不能使用本条语句之后定义的变量；</p>

<p>“=”，当它的右边赋值是变量时，这个变量的定义在本条语句之前或之后都可以；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(一)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/05/learn_jni_1/"/>
    <updated>2016-04-05T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/05/learn_jni_1</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;android中很多Java类都具有native接口，这些接口由本地实现，然后注册到系统中。   <br/>
主要的JNI代码放在以下的路径中：frameworks/base/core/jni/，这个路径中的内容被编译成库 libandroid_runtime.so，被放置在目标系统的/system/lib目录下。此外，android还有其他的 JNI库。JNI中的各个文件，实际上就是普通的C++源文件.
如果要深入了解android framework层，则必须Android Native层运行及开发机制.
这里先介绍一些native的基础知识</p>

<!--more-->


<h4>1、接口定义</h4>

<p>&#160; &#160; &#160; &#160;_JNIEnv定义了一个虚拟机的接口，通过这个接口可以访问虚拟机的所有功能：
1)分配对象（AllocObject/NewObject），并且控制对象的引用计数（NewGlobalRef/DeleteGlobalRef/DeleteLocalRef/IsSameObject/NewLocalRef）。
2)获取类的定义（FindClass），并通过类的定义来获取获取类得方法和成员的ID（GetMethodID/GetFieldID）
3)通过方法ID调用类的普通方法（CallObjectMethod）和静态方法（CallStaticObjectMethod）
4)通过成员ID获取和设置类的普通成员（GetObjectField/SetObjectField）和静态成员（GetStaticObjectField/SetStaticObjectField）</p>

<p>下面是比较常用的方法：</p>

<h6>1.1查找该类：</h6>

<p>   jclass xxx = (*env)->FindClass(env, &ldquo;Lclass_name;&rdquo;);</p>

<h6>1.2取得方法的id：</h6>

<p>   jmethodID xxx = (*env)->GetMethodID(env, jclass, methodName, &ldquo;(M)N&rdquo;);</p>

<h6>1.3查找需要调用的该类的方法：</h6>

<p>   jmethodID xxx = (*env)->GetMethodID(env, jclass, &ldquo;(M)N&rdquo; );</p>

<h6>1.4取得静态方法的id</h6>

<p>   jmethodID  xxx = (*env)->GetStaticMethodID(env,jclass, methodName,&ldquo;(M)N&rdquo;)</p>

<h6>1.5初始化该类的实例：</h6>

<p>   jobject xxx = (*env)->NewObject(env, jclass, jmethodID );</p>

<h6>1.6调用实例的某方法：</h6>

<p>   (*env)->CallObjectMethod(env, jobject, jmethodID, [parameter1, parameter2,&hellip;] );</p>

<h6>1.7释放实例：</h6>

<p>   (*env)->DeleteLocalRef(env, xxx);</p>

<h6>1.8取得成员变量的id</h6>

<p>   jfieldID xxx = (*env)->GetFieldID(env,jclass ,jfieldID,jfieldType)</p>

<h6>1.9取得静态成员变量的id</h6>

<p>   jfieldID xxx = GetStaticFieldID(env,jclass ,jfieldID,jfieldType)
JNIENV - java的运行环境
jobject - 代表java的instance
jclass - 代表java的类</p>

<h4>2、函数与属性签名</h4>

<p>&#160; &#160; &#160; &#160;在GetMethodID和GetFieldID这两个函数中，最后一个参数都是签名字符串，用来标示java函数和成员的唯一性。
因为java中存在重载函数，所以一个函数名不足以唯一指定一个函数，这时候就需要签名字符串来指定函数的参数列表和返回值类型了。
函数签名是一个字符串："(M)N"
括号中的内容是函数的参数类型，括号后面表示函数的返回值。</p>

<h4>3、JNI 类型签名</h4>

<p>&#160; &#160; &#160; &#160;&ldquo;(M)N&rdquo;,这里的M和N指的是该函数的输入和输出参数的类型签名(Type Signature)。
具体的每一个字符的对应关系如下:</p>

<h6>字符&ndash;Java类型&ndash;C类型</h6>

<h6>V&ndash;void&ndash;void</h6>

<h6>Z&ndash;jboolean&ndash;boolean</h6>

<h6>I&ndash;jint&ndash;int</h6>

<h6>J&ndash;jlong&ndash;long</h6>

<h6>D&ndash;jdouble&ndash;double</h6>

<h6>F&ndash;jfloat&ndash;float</h6>

<h6>B&ndash;jbyte&ndash;byte</h6>

<h6>C&ndash;jchar&ndash;char</h6>

<h6>S&ndash;jshort&ndash;short</h6>

<p>数组则以”[&ldquo;开始，用两个字符表示</p>

<h6>[I&ndash;jintArray&ndash;int[]</h6>

<h6>[F&ndash;jfloatArray&ndash;float[]</h6>

<h6>[B&ndash;jbyteArray&ndash;byte[]</h6>

<h6>[C&ndash;jcharArray&ndash;char[]</h6>

<h6>[S&ndash;jshortArray&ndash;short[]</h6>

<h6>[D&ndash;jdoubleArray&ndash;double[]</h6>

<h6>[J&ndash;jlongArray&ndash;long[]</h6>

<h6>[Z&ndash;jbooleanArray&ndash;boolean[]</h6>

<p>&#160; &#160; &#160; &#160;如果Java函数的参数是class，则以”L”开头，以”;”结尾，中间是用”/” 隔开的包及类名。而其对应的C函数名的参数则为jobject</p>

<p>一个例外是String类，其对应的类为jstring</p>

<p>Ljava/lang/String; String jstring</p>

<p>Ljava/net/Socket; Socket jobject</p>

<p>如果JAVA函数位于一个嵌入类，则用$作为类名间的分隔符。
例如 “(Ljava/lang/String;Landroid/os/FileUtils$FileStatus;)Z”
举例说明"(M)N"的含义，例如：</p>

<p>(I)V   带一个int 类型的参数，返回值类型为void</p>

<p>()D     没有参数，返回double</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android程序逆向工程]]></title>
    <link href="http://chendd.github.io/blog/2015/11/24/android_reverse_engineering/"/>
    <updated>2015-11-24T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2015/11/24/android_reverse_engineering</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;随着智能手机的普及，功能越来越强大。程序也越来多和复杂化。研究一下android系统的逆向工程也是挺有意思的。
目前android逆向工程还处于初级阶段。表现在于：</p>

<ul>
<li>1.没有完整的动态调试程序。目前由于android系统的bionic并不完全支持POSIX,导致现有编译的gdb不支持多线程无符号调试。（我实验了一下，的确多线程问题比较多，当然，gdb本身也有问题）。所以对于NDK逆向工程比较麻烦，以静态分析为主。</li>
<li>2.手机本身种类较多，而且android版本繁多，更新较快，增加了逆向的难度。</li>
</ul>


<!--more-->


<p>但是android系统自身也有好处：</p>

<ul>
<li>1.手机系统的简化工作让分析也随着简化。</li>
<li>2.公开源代码 大不了我修改系统API编译系统来进行API hook。谁也拦不住。（android不支持LD_Library API hook).</li>
</ul>


<p>&#160; &#160; &#160; &#160;以上谈到的都是arm c，一般用于NDK中的逆向工程。那么对于才用Dalvik虚拟机中的dex程序，逆向就完全没有难度。目前最好的逆向工具是baksmali。综合工具是apktools,甚至于支持动态调试。</p>

<p>&#160; &#160; &#160; &#160;如果以前你接触过windows的逆向工程，那么对于android的逆向难度不大。首先谈谈最简单的dex程序逆向。</p>

<p>&#160; &#160; &#160; &#160;第一种 dex程序其实就是java。google为了避免版权问题采用的一种技巧。java的逆向工程不用说，已经很成熟了。在java中大规模采用的混淆手段目前在android dex程序中采用得很少，也就是说，dex程序基本就是裸体，任人观赏。smali代码看看你就懂得。很简单，比如我自己写了ultraedit的高亮函数宏，很方便查找smali的函数。用Jgraph写个小程序画出函数内部流程。你懂的。</p>

<p>&#160; &#160; &#160; &#160;第二种 就是NDK中的so文件的逆向，正如我前面说的。动态调试比较困难，理论上呢可以自己完全定制系统来实现动态调试，但是，的确没这么多精力。（如果你有时间和精力，可以完全定制一个系统实现兼容GDB的android内核）。那么就是以业界著名的IDA来静态分析。IDA最新版本支持率QEMU的代码段调试。希望将来我们能用上~~~ 那么IDA分析so 文件，根据我的经验，5.4以后的版本才对arm thumb指令处理较好。所以，请注意版本问题。一下就是对elf文件和arm code的理解和分析了。这个以后再说吧。</p>

<p>&#160; &#160; &#160; &#160;以上是我对android 逆向工程的一点小小体会和理解，不乏很多错误，请谅解。希望能抛砖引玉。喜欢的朋友可以看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何优化手机电量]]></title>
    <link href="http://chendd.github.io/blog/2015/04/30/optimization_electricity/"/>
    <updated>2015-04-30T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2015/04/30/optimization_electricity</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;通过电量的计算公式我们可以看到影响电量的因子无非就是CPU的时间和网络数据以及Wakelock，GPS的使用。
在09年Google IO大会Jeffrey Sharkey的演讲（Coding for Life — Battery Life, That Is）中就探讨了这个问题，指出android应用的耗电主要在以下三个方面：</p>

<ul>
<li>大数据量的传输。</li>
<li>不停的在网络间切换。</li>
<li>解析大量的文本数据。</li>
</ul>


<!--more-->


<p>&#160; &#160; &#160; &#160;并提出了相关的优化建议：
在需要网络连接的程序中，首先检查网络连接是否正常，如果没有网络连接，那么就不需要执行相应的程序。
使用效率高的数据格式和解析方法，推荐使用JSON和Protobuf。
目在进行大数据量下载时，尽量使用GZIP方式下载。
其它：回收java对象，特别是较大的java对像，使用reset方法；对定位要求不是太高的话尽量不要使用GPS定位，可能使用wifi和移动网络cell定位即可；尽量不要使用浮点运算；获取屏幕尺寸等信息可以使用缓存技术，不需要进行多次请求；使用AlarmManager来定时启动服务替代使用sleep方式的定时任务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github 简单使用]]></title>
    <link href="http://chendd.github.io/blog/2014/08/10/github_learn/"/>
    <updated>2014-08-10T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2014/08/10/github_learn</id>
    <content type="html"><![CDATA[<h2>一、从远程克隆项目，修改后提交</h2>

<h4>1、先切换要放项目的本地目录</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\Users\chendd&gt;cd E:\web
</span><span class='line'>
</span><span class='line'>C:\Users\chendd&gt;e:</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h4>2、根据服务器的git地址克隆到本地，并查看状态</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E:\web&gt;git clone https://github.com/findbugGroup/findbug-v0.1.git
</span><span class='line'>Cloning into 'findbug-v0.1'...
</span><span class='line'>remote: Counting objects: 1436, done.
</span><span class='line'>remote: Compressing objects: 100% (1313/1313), done.
</span><span class='line'>remote: Total 1436 (delta 476), reused 0 (delta 0)
</span><span class='line'>Receiving objects: 100% (1436/1436), 3.29 MiB | 190.00 KiB/s, done.
</span><span class='line'>Resolving deltas: 100% (490/490), done.
</span><span class='line'>Checking connectivity... done.
</span><span class='line'>
</span><span class='line'>E:\web&gt;git status
</span><span class='line'>fatal: Not a git repository (or any of the parent directories): .git
</span><span class='line'>
</span><span class='line'>E:\web&gt;cd findbug-v0.1
</span><span class='line'>
</span><span class='line'>E:\web\findbug-v0.1&gt;git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>        modified:   README.md
</span><span class='line'>
</span><span class='line'>no changes added to commit (use "git add" and/or "git commit -a")</span></code></pre></td></tr></table></div></figure>


<h4>3、修改下项目，提交到本地暂存（可能要输入用户名，密码。也可以提前配置）</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E:\web\findbug-v0.1&gt;git commit -a -m "test"
</span><span class='line'>
</span><span class='line'>*** Please tell me who you are.
</span><span class='line'>
</span><span class='line'>Run
</span><span class='line'>
</span><span class='line'>  git config --global user.email "you@example.com"
</span><span class='line'>  git config --global user.name "Your Name"
</span><span class='line'>
</span><span class='line'>to set your account's default identity.
</span><span class='line'>Omit --global to set the identity only in this repository.
</span><span class='line'>
</span><span class='line'>fatal: unable to auto-detect email address (got 'chendd@chendd-PC.(none)')
</span><span class='line'>
</span><span class='line'>E:\web\findbug-v0.1&gt;git config --global user.email "mail4chedd@qq.com"
</span><span class='line'>
</span><span class='line'>E:\web\findbug-v0.1&gt;git config --global user.name "chendd"
</span><span class='line'>
</span><span class='line'>E:\web\findbug-v0.1&gt;git commit -a -m "test"
</span><span class='line'>[master 32a7c94] test
</span><span class='line'> 1 file changed, 1 insertion(+)</span></code></pre></td></tr></table></div></figure>


<h4>4、提交到远程服务器上去</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E:\web\findbug-v0.1&gt;git push origin master
</span><span class='line'>Username for 'https://github.com': chendd
</span><span class='line'>Password for 'https://chendd@github.com':
</span><span class='line'>Counting objects: 5, done.
</span><span class='line'>Delta compression using up to 2 threads.
</span><span class='line'>Compressing objects: 100% (2/2), done.
</span><span class='line'>Writing objects: 100% (3/3), 284 bytes | 0 bytes/s, done.
</span><span class='line'>Total 3 (delta 1), reused 0 (delta 0)
</span><span class='line'>To https://github.com/findbugGroup/findbug-v0.1.git
</span><span class='line'>   6fd4585..32a7c94  master -&gt; master</span></code></pre></td></tr></table></div></figure>


<h2>二、将本地项目提交到远程服务器</h2>

<h4>1、先在远程网站上 new 个新的repository，复制git地址</h4>

<p>然后按照 网站上说的 终端上运行命令（这里我是后来再新建的，故git名加个2，区分）</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/1.jpg" alt="image" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E:\web\findbug-v0.1&gt;cd ..
</span><span class='line'>
</span><span class='line'>E:\web&gt;mkdir beatplane
</span><span class='line'>
</span><span class='line'>E:\web&gt;cd beatplane
</span><span class='line'>
</span><span class='line'>E:\web\beatplane&gt;git init
</span><span class='line'>Initialized empty Git repository in E:/web/beatplane/.git/
</span><span class='line'>
</span><span class='line'>E:\web\beatplane&gt;touch README.md
</span><span class='line'>
</span><span class='line'>E:\web\beatplane&gt;git add README.md
</span><span class='line'>
</span><span class='line'>E:\web\beatplane&gt;git add .
</span><span class='line'>
</span><span class='line'>E:\web\beatplane&gt;git commit -m "first commit"
</span><span class='line'>[master (root-commit) 7c19145] first commit
</span><span class='line'> 3 files changed, 0 insertions(+), 0 deletions(-)
</span><span class='line'> create mode 100644 README.md
</span><span class='line'> create mode 100644 "\346\226\260\345\273\272\346\226\207\346\234\254\346\226\20
</span><span class='line'>7\346\241\243 (2).txt"
</span><span class='line'> create mode 100644 "\346\226\260\345\273\272\346\226\207\346\234\254\346\226\20
</span><span class='line'>7\346\241\243.txt"
</span><span class='line'>
</span><span class='line'>E:\web\beatplane&gt;git remote add origin https://github.com/chendd/BeatPlane.git
</span><span class='line'>
</span><span class='line'>E:\web\beatplane&gt;git push -u origin master
</span><span class='line'>Username for 'https://github.com': chendd
</span><span class='line'>Password for 'https://chendd@github.com':
</span><span class='line'>Counting objects: 3, done.
</span><span class='line'>Delta compression using up to 2 threads.
</span><span class='line'>Compressing objects: 100% (2/2), done.
</span><span class='line'>Writing objects: 100% (3/3), 239 bytes | 0 bytes/s, done.
</span><span class='line'>Total 3 (delta 0), reused 0 (delta 0)
</span><span class='line'>To https://github.com/chendd/BeatPlane.git
</span><span class='line'> * [new branch]      master -&gt; master
</span><span class='line'>Branch master set up to track remote branch master from origin.</span></code></pre></td></tr></table></div></figure>


<p>提交刷新网页，大功告成</p>

<p><img src="http://7arnbf.com1.z0.glb.clouddn.com/2.jpg" alt="image" /></p>

<p>附：<a href="http://tieba.baidu.com/p/2856796771">git客户端安装和使用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 横竖屏切换处理]]></title>
    <link href="http://chendd.github.io/blog/2014/07/25/android_land_port/"/>
    <updated>2014-07-25T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2014/07/25/android_land_port</id>
    <content type="html"><![CDATA[<p>Android横竖屏要解决的问题应该就两个：</p>

<ul>
<li>布局问题</li>
<li>重新载入问题</li>
</ul>


<!--more-->


<h2>一.布局问题：</h2>

<p>&#160; &#160; &#160; &#160;如果不想让软件在横竖屏之间切换，最简单的办法就是在项目的AndroidManifest.xml中找到你所指定的activity中加上android:screenOrientation属性，他有以下几个参数：</p>

<ul>
<li>unspecified:默认值 由系统来判断显示方向.判定的策略是和设备相关的，所以不同的设备会有不同的显示方向.</li>
<li>landscape:横屏显示（宽比高要长）</li>
<li>portrait:竖屏显示(高比宽要长)</li>
<li>user:用户当前首选的方向</li>
<li>behind:和该Activity下面的那个Activity的方向一致(在Activity堆栈中的)</li>
<li>sensor:有物理的感应器来决定。如果用户旋转设备这屏幕会横竖屏切换。</li>
<li>nosensor:忽略物理感应器，这样就不会随着用户旋转设备而更改了（"unspecified"设置除外）。</li>
</ul>


<p>也可以在Java代码中通过</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">setRequestedOrientation</span><span class="o">(</span><span class="n">ActivityInfo</span><span class="o">.</span><span class="na">SCREEN_ORIENTATION_LANDSCAPE</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>来设置。</p>

<p>如果要让软件在横竖屏之间切换，由于横竖屏的高宽会发生转换，有可能会要求不同的布局。可以通过以下方法来切换布局：</p>

<ul>
<li><p>在res目录下建立layout-land和layout-port目录,相应的layout文件不变，比如main.xml。layout-land是横屏的layout,layout-port是竖屏的layout，其他的不用管，模拟器会自动寻找。</p></li>
<li><p>通过 this.getResources().getConfiguration().orientation来判断当前是横屏还是竖屏然后来加载相应的 xml布局文件。因为当屏幕变为横屏的时候,系统会重新呼叫当前Activity的onCreate方法,你可以把以下方法放在你的onCreate中来检查当前的方向,然后可以让你的setContentView来载入不同的layout xml.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getResources</span><span class="o">().</span><span class="na">getConfiguration</span><span class="o">().</span><span class="na">orientation</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">ORIENTATION_LANDSCAPE</span><span class="o">){</span>
</span><span class='line'>　　<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;info&quot;</span><span class="o">,</span> <span class="s">&quot;landscape&quot;</span><span class="o">);</span> <span class="c1">// 横屏</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getResources</span><span class="o">().</span><span class="na">getConfiguration</span><span class="o">().</span><span class="na">orientation</span> <span class="o">==</span><span class="n">Configuration</span><span class="o">.</span><span class="na">ORIENTATION_PORTRAIT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>　　<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">&quot;info&quot;</span><span class="o">,</span> <span class="s">&quot;portrait&quot;</span><span class="o">);</span> <span class="c1">// 竖屏</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在onConfigurationChanged()方法中也可以检测拥有硬键盘的键盘状态</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//检测实体键盘的状态：推出或者合上 &amp;nbsp;&amp;nbsp;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">newConfig</span><span class="o">.</span><span class="na">hardKeyboardHidden</span> <span class="o">==</span><span class="n">Configuration</span><span class="o">.</span><span class="na">HARDKEYBOARDHIDDEN_NO</span><span class="o">){</span>
</span><span class='line'>　　<span class="c1">//实体键盘处于推出状态，在此处添加额外的处理代码</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">newConfig</span><span class="o">.</span><span class="na">hardKeyboardHidden</span> <span class="o">==</span><span class="n">Configuration</span><span class="o">.</span><span class="na">HARDKEYBOARDHIDDEN_YES</span><span class="o">){</span>
</span><span class='line'>　　<span class="c1">//实体键盘处于合上状态，在此处添加额外的处理代码</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>二.重新载入问题：</h2>

<p>&#160; &#160; &#160; &#160;如果不需要从新载入，可以在AndroidManifest.xml中加入配置 android:configChanges=&ldquo;orientation|keyboardHidden"，配置 android:configChanges的作用就是如文档所说的：</p>

<blockquote><p>Specify one or more configuration changesthat the activity will handle itself. If not specified, the activity will berestarted if any of these configuration changes happen in the system。</p></blockquote>

<p>这样在程序中Activity就不会重复的调用onCreate()甚至不会调用onPause、onResume.只会调用一个 onConfigurationChanged(Configuration newConfig)。如果需要重新载入，则不需要做任何修改。不过如果需要在重新载入过程中保存之前的操作内容或数据，则需要保存之前的数据。然后在 activity的onCreate()中取出来。当然，如此就不能设置android:configChanges()了，否则就不会调用 onCreate()方法。</p>

<p>&#160; &#160; &#160; &#160;如果要彻底禁止翻转，可以设置android:screenOrientation的属性为nosensor，如此就可以忽略重力感应带来的麻烦了。不过在模拟器上不管用，在真机上是正确的。android:screenOrientation=&ldquo;portrait"则无论手机如何变动，拥有这个属性的activity都将是竖屏显示。android:screenOrientation="landscape"，为横屏显示。</p>

<p>&#160; &#160; &#160; &#160;这里提一个小知识，Android模拟器中，快捷键"Ctrl+F11/F12"可以实现转屏</p>

<h2>三.总结：</h2>

<p>总之，对于横竖屏切换的问题，统计了下，大家的解决办法是：</p>

<p>①不理会。</p>

<p>②只竖屏显示(android:screenOrientation=&ldquo;portrait&rdquo;);只横屏显示(android:screenOrientation=&ldquo;landscape&rdquo;)</p>

<p>③简单的防止重载：
   在 AndroidManifest.xml中加入：android:configChanges=&ldquo;orientation|keyboardHidden&rdquo;
   在activity中重载onConfigurationChanged事件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigurationChanged</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> 　　<span class="kd">super</span><span class="o">.</span><span class="na">onConfigurationChanged</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>④横竖屏分别布局
   横竖屏分别布局的方法是：
   在res下新建
   layout-land 横屏
   layout-port 竖屏
   然后把layout中的xml文件分别考到以上目录，修改布局就可以了代码中不做任何更改。
   在 AndroidManifest.xml文件中的主Activity中加入
   android:configChanges=&ldquo;orientation|keyboardHidden&rdquo;
   然后在主Activity中的onConfigurationChanged加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigurationChanged</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>　　<span class="kd">super</span><span class="o">.</span><span class="na">onConfigurationChanged</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">orientation</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">ORIENTATION_PORTRAIT</span><span class="o">){</span>
</span><span class='line'>　　        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span> <span class="c1">//布局</span>
</span><span class='line'>　　        <span class="n">tv</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">EditText01</span><span class="o">);</span><span class="c1">//控件</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">orientation</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">ORIENTATION_LANDSCAPE</span><span class="o">){</span>
</span><span class='line'>　　        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span> <span class="c1">//布局</span>
</span><span class='line'>　　        <span class="n">tv</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">EditText01</span><span class="o">);</span><span class="c1">//控件</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 多语言版本开发]]></title>
    <link href="http://chendd.github.io/blog/2014/07/23/android_multi_language/"/>
    <updated>2014-07-23T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2014/07/23/android_multi_language</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;最近项目中用用到语言切换功能，第一想到的就是资源文件，没错。</p>

<p>&#160; &#160; &#160; &#160;在资源文件中新建一个文件夹values-en，en表示英语，有一些还细化到地区，如values-en-rUS 即美国地区的英语，r是必需的。在里面新建一个strings.xml，把默认values文件夹中的strings.xml中的内容Copy至values-en中的strings.xml，再把该文件夹中的中文内容转换为英文，例如<string name="set">设置</string>转换为<string name="set">set</string>。不止values文件可以这样，res文件夹下的都可以，但是assets就不行，这是外部文件。如果有做webapp引用网页形式 考虑多语言版本，可以java代码判断系统语言，再去调用相应的html文件。</p>

<!--more-->


<p>然后再主Activity中写一个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">switchLanguage</span><span class="o">(</span><span class="n">Locale</span> <span class="n">locale</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">//应用内配置语言</span>
</span><span class='line'>　　　　<span class="n">Resources</span> <span class="n">resources</span> <span class="o">=</span><span class="n">getResources</span><span class="o">();</span><span class="c1">//获得res资源对象  </span>
</span><span class='line'>　　　　<span class="n">Configuration</span> <span class="n">config</span> <span class="o">=</span> <span class="n">resources</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">();</span><span class="c1">//获得设置对象  </span>
</span><span class='line'>　　　　<span class="n">DisplayMetrics</span> <span class="n">dm</span> <span class="o">=</span> <span class="n">resources</span><span class="o">.</span><span class="na">getDisplayMetrics</span><span class="o">();</span><span class="c1">//获得屏幕参数：主要是分辨率，像素等。</span>
</span><span class='line'>　　　　<span class="n">config</span><span class="o">.</span><span class="na">locale</span> <span class="o">=</span> <span class="n">Locale</span><span class="o">.</span><span class="na">SIMPLIFIED_CHINESE</span><span class="o">;</span> <span class="c1">//简体中文</span>
</span><span class='line'>　　　　<span class="n">resources</span><span class="o">.</span><span class="na">updateConfiguration</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">dm</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有一些相对不那么常用的语言Locale没提供相应的常量，这时
如阿拉伯语，直接</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">config</span><span class="o">.</span><span class="na">locale</span> <span class="o">=</span><span class="k">new</span> <span class="nf">Locale</span><span class="o">(</span><span class="s">&quot;ar&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>　    <br/>
必须在OnCreate函数中调用
还得注意的是：在AndroidManifest.xml中要配置一下
在activity节点中加上这个属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>android:configChanges=&quot;locale&quot;
</span></code></pre></td></tr></table></div></figure>


<p>添加权限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CHANGE_CONFIGURATION&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写高效的Android代码]]></title>
    <link href="http://chendd.github.io/blog/2013/05/15/efficient_android_code/"/>
    <updated>2013-05-15T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2013/05/15/efficient_android_code</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;编写Android程序时要时刻考虑执行的效率，这系统不是想象中的那么快，并且你还要考虑它电池的续航能力。写程序的时候，要尽可能的使你的代码优化而提高效率。</p>

<p>&#160; &#160; &#160; &#160;对于如何判断一个系统的不合理，这里有两个基本的原则：</p>

<h4>1、不要做不必要做的事情。</h4>

<h4>2、尽可能的节省内存的使用。</h4>

<!--more-->


<p>&#160; &#160; &#160; &#160;下面是常用的几点优化建议：</p>

<h4>1、尽可能避免创建对象（Object）</h4>

<p>&#160; &#160; &#160; &#160;因为对象的创建并不是没有代价的，如果你在一个用户界面的循环中分配一个对象，你不得不强制的进行内存回收，那么就会使用户体验出现稍微“打嗝”的现象。</p>

<p>&#160; &#160; &#160; &#160;当从原始的输入数据中提取字符串时，试着从原始字符串返回一个子字符串，而不是创建一份拷贝。</p>

<h4>2、使用自身方法（Use Native Methods）</h4>

<p>&#160; &#160; &#160; &#160;当处理字符串的时候，不要犹豫，尽可能多的使用诸如String.indexOf()、String.lastIndexOf()这样对象自身带有的方法。因为这些方法使用C/C++来实现的，
要比在一个java循环中做同样的事情快10-100倍。</p>

<h4>3、缓冲属性调用Cache Field Lookups</h4>

<p>&#160; &#160; &#160; &#160;访问对象属性要比访问本地变量慢得多。你不应该这样写你的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">mCount</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="n">dumpItem</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mItems</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;而是应该这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">mCount</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Item</span><span class="o">[]</span> <span class="n">items</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">mItems</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="n">dumpItems</span><span class="o">(</span><span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;我们直接使用“this”表明这些是它的成员变量</p>

<h4>4、声明Final常量</h4>

<p>&#160; &#160; &#160; &#160;我们可以看看下面一个类顶部的声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="n">intVal</span> <span class="o">=</span> <span class="mi">42</span><span class="o">;</span>
</span><span class='line'><span class="kd">static</span> <span class="n">String</span> <span class="n">strVal</span> <span class="o">=</span> <span class="s">&quot;Hello, world!&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;当一个类第一次使用时，编译器会调用一个类初始化方法，这个方法将42存入变量intVal，并且为strVal在类文件字符串常量表中提取一个引用，当这些值在后面引用时，就会直接属性调用。</p>

<p>&#160; &#160; &#160; &#160;我们可以用关键字“final”来改进代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">intVal</span> <span class="o">=</span> <span class="mi">42</span><span class="o">;</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">strVal</span> <span class="o">=</span> <span class="s">&quot;Hello, world!&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;这个类将不会调用类初始化方法，因为这些常量直接写入了类文件静态属性初始化中，这个初始化直接由虚拟机来处理。代码访问intVal将会使用Integer类型的42，访问strVal将使用相对节省的“字符串常量”来替代一个属性调用。
将一个类或者方法声明为“final”并不会带来任何的执行上的好处，它能够进行一定的最优化处理。例如，如果编译器知道一个Get方法不能被子类重载，那么它就把该函数设置成Inline。</p>

<h4>5、避免浮点类型的使用</h4>

<p>&#160; &#160; &#160; &#160;嵌入式的处理器通常并不支持浮点数的处理，因此所有的“float”和“double”操作都是通过软件进行的，一些基本的浮点数的操作就需要花费毫秒级的时间。同时，即使是整数，一些芯片也只有乘法而没有除法。在这些情况下，整数的除法和取模操作都是通过软件实现。</p>

<h4>6、避免列举类型Avoid Enums</h4>

<p>&#160; &#160; &#160; &#160;列举类型非常好用，当考虑到尺寸和速度的时候，就会显得代价很高，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Shrubbery</span> <span class="o">{</span> <span class="n">GROUND</span><span class="o">,</span> <span class="n">CRAWLING</span><span class="o">,</span> <span class="n">HANGING</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;这会转变成为一个900字节的class文件（Foo$Shrubbery.class）。第一次使用时，类的初始化要在独享上面调用方法去描述列举的每一项，每一个对象都要有它自身的静态空间，整个被储存在一个数组里面（一个叫做“$VALUE”的静态数组）。那是一大堆的代码和数据，仅仅是为了三个整数值。Shrubbery shrub = Shrubbery.GROUND;这会引起一个静态属性的调用，如果GROUND是一个静态的Final变量，编译器会把它当做一个常数嵌套在代码里面。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习日记25--ANR和Hander消息机制]]></title>
    <link href="http://chendd.github.io/blog/2013/03/30/android_study_25/"/>
    <updated>2013-03-30T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2013/03/30/android_study_25</id>
    <content type="html"><![CDATA[<h4>1、ANR(Application Not Responding)定义</h4>

<p>　　在Android上，如果你的应用程序有一段时间响应不够灵敏，系统会向用户显示一个对话框，
这个对话框称作应用程序无响应（ANR：Application Not Responding）对话框。用户可以选择“等待”而让程序继续运行，
也可以选择“强制关闭”。所以一个流畅的合理的应用程序中不能出现anr，而让用户每次都要处理这个对话框。
因此，在程序里对响应性能的设计很重要，这样系统不会显示ANR给用户。默认情况下，在android中Activity的最长执行时间是5秒，
BroadcastReceiver的最长执行时间则是10秒。</p>

<!--more-->


<p><img src="http://images.cnitblog.com/i/602984/201404/172223300108690.jpg" alt="image" /></p>

<h4>2、如何避免ANR</h4>

<p>&#160; &#160; &#160; &#160;Android应用程序通常是运行在一个单独的UI主线程里，因此，运行在主线程里的任何方法都尽可能少做事情。
特别是，Activity应该在它的关键生命周期方法（如onCreate()和onResume()）里尽可能少的去做创建操作。
潜在的耗时操作，例如网络或数据库操作，或者高耗时的计算如改变位图尺寸，应该在子线程里
（或者以数据库操作为例，通过异步请求的方式）来完成。然而，不是说你的主线程阻塞在那里等待子线程的完成——也不是调用
Thread.wait()或是Thread.sleep()。替代的方法是，主线程应该为子线程提供一个Handler，以便完成时能够提交给主线程。</p>

<h4>3、Hander 定义</h4>

<p>&#160; &#160; &#160; &#160;主要接受子线程发送的数据, 并用此数据配合主线程更新UI.
直接在UI线程中开启子线程来更新TextView显示的内容，运行程序我们会发现，如下错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>android.view.ViewRoot$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;翻译过来就是：只有创建这个控件的线程才能去更新该控件的内容。
所有的UI线程要去负责View的创建并且维护它，例如更新冒个TextView的显示，都必须在主线程中去做，我们不能直接在UI线程中去创建子线程，
要利用消息机制：handler，如下就是handler的简单工作原理图:</p>

<p><img src="http://images.cnitblog.com/i/602984/201404/181859021979455.gif" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;Android系统中的Looper负责管理线程的消息队列和消息循环。创建的工作线程默认是没有消息队列和消息循环的，如果想让工作线程具有消息队列和消息循环，</p>

<p>&#160; &#160; &#160; &#160;就需要在线程中先调用Looper.prepare()来创建消息队列，然后调用Looper.loop()进入消息循环。下面是我们创建的工作线程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">WorkThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Handler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="c1">// 处理收到的消息</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;这样一来，我们创建的工作线程就具有了消息处理机制了。运行在主线程中，Android系统会在Activity启动时为其创建一个消息队列和消息循环，就不需要</p>

<p>Looper.prepare()和Looper.loop();</p>

<h4>4、Hander 用法</h4>

<p>&#160; &#160; &#160; &#160;继承或实现Hendler类，并重写handleMessage(Message msg) 方法, 用于接受线程数据
如下实例：</p>

<p>&#160; &#160; &#160; &#160;启动后，更新后的值一直在增加</p>

<p><img src="http://images.cnitblog.com/i/602984/201404/172206262912209.png" alt="image" /></p>

<p>主要代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TextView</span> <span class="n">tv</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">UPDATE</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Handler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// TODO 接收消息并且去更新UI线程上的控件内容</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">what</span> <span class="o">==</span> <span class="n">UPDATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Bundle b = msg.getData();</span>
</span><span class='line'>                <span class="c1">// tv.setText(b.getString(&quot;num&quot;));</span>
</span><span class='line'>                <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">obj</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Called when the activity is first created. */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">tv</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// TODO 子线程中通过handler发送消息给handler接收，由handler去更新TextView的值</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Message</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">msg</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">UPDATE</span><span class="o">;</span>
</span><span class='line'>                        <span class="c1">// Bundle b = new Bundle();</span>
</span><span class='line'>                        <span class="c1">// b.putString(&quot;num&quot;, &quot;更新后的值：&quot; + i);</span>
</span><span class='line'>                        <span class="c1">// msg.setData(b);</span>
</span><span class='line'>                        <span class="n">msg</span><span class="o">.</span><span class="na">obj</span> <span class="o">=</span> <span class="s">&quot;更新后的值：&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>                        <span class="n">handler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#160; &#160; &#160; &#160;关于message，指对于Android中Handler可以传递一些内容，通过Bundle对象可以封装String、Integer以及Blob二进制对象，
我们通过在线程中使用Handler对象的sendEmptyMessage或sendMessage方法来传递一个Bundle对象到Handler处理器。
对于Handler类提供了重写方法handleMessage(Message msg) 来判断，通过msg.what来区分每条信息。
将Bundle解包来实现Handler类更新UI线程中的内容实现控件的刷新操作。相关的Handler对象有关消息发送sendXXXX相关方法如下，
同时还有postXXXX相关方法，这些和Win32中的道理基本一致，一个为发送后直接返回，一个为处理后才返回。</p>

<p>&#160; &#160; &#160; &#160;比如我们可以在message里封装Bundle对象。</p>

<p>&#160; &#160; &#160; &#160;两边传递的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 其他Thread里发送</span>
</span><span class='line'><span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Message</span><span class="o">();</span>
</span><span class='line'><span class="n">Bundle</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Bundle</span><span class="o">();</span><span class="c1">// 存放数据</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;color&quot;</span><span class="o">,</span> <span class="s">&quot;我的&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">msg</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// handleMessage里接收</span>
</span><span class='line'><span class="n">Bundle</span> <span class="n">b</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span> <span class="n">color</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;color&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5、单线程的消息机制</h4>

<p>&#160; &#160; &#160; &#160;Hander属于多线程的消息机制，Android 单线程事件处理机制 有两种</p>

<ul>
<li>1、基于监听器的机制</li>
</ul>


<p>　　绑定特定的事件监听器，如Button的OnClickListener监听器， 监听器模型:包含事件源(EventSource)、事件(Event)、事件监听器(EventListener)。 一般内部类作为事件监听器类，主要因为 内部类可以在当前类复用;内部类可以调用外部类的组件。当然如果多个 GUI公用一个监听器类，还是使用外部类好一点，只需传入当前的context。当然大部分时间处理没什么复用价值， 更多的时候使用内部匿名类来实现。</p>

<ul>
<li>2、基于回调函数的机制</li>
</ul>


<p>　　重写回调方法，如View的OnKeyDown方法，基于回调函数的机制的事件源和事件监听器是统一的， Android为所有GUI提供一套事件处理方法，当重写回调函数处理完后必需返回true，事件才不会继续向上层调用。</p>

<p>&#160; &#160; &#160; &#160;优劣：基于回调函数 使得更具通用型、代码更加简洁， 基于回调函数 事件模型分工明确、具有更好的维护性 对于特定事件，无法使用回调函数只能使用监听器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习日记24--菜单开发]]></title>
    <link href="http://chendd.github.io/blog/2013/03/30/android_study_24/"/>
    <updated>2013-03-30T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2013/03/30/android_study_24</id>
    <content type="html"><![CDATA[<p>　　菜单是任何应用程序必不可少的一项。按下Menu键或者长按某个View就会弹出相应菜单，当然前提是应用程序有实现菜单功能。
Android平台下的菜单有：Options Menu(选项菜单)、Submenu(子菜单)、Context Menu(上下文菜单)。
这次的案例用以前的索尼真机测试，就不贴代码和运行截图，主要贴些理论知识。菜单这块比较简单，代码实例看<a href="http://www.cnblogs.com/giuz/archive/2010/10/19/1855235.html">这里</a></p>

<!--more--> 


<h2>一、选项菜单和子菜单</h2>

<p>　　Options Menu和Submenu 是一组的，放在一起介绍，一般用于开发普通的选项菜单。</p>

<p>相关回调方法及说明：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/292323410312532.png" alt="image" /></p>

<p>涉及到相关类详解：</p>

<h4>1、Menu类</h4>

<p>　　一个Menu对象代表一个菜单，Menu对象中可以添加菜单项MenuItem，也可以添加子菜单SubMenu。常用方法如下:</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/292324064696628.png" alt="image" /></p>

<p>注意：clear() 方法用于清除已添加的菜单，通过代码运行中的clear()再add()可以用于动态配置菜单。</p>

<h4>2、MenuItem类</h4>

<p>　　一个MenuIten对象代表一个菜单项，通常MenuItem实例通过Menu的add方法获得。常用方法如下：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/292325371093303.png" alt="image" /></p>

<p>注意：Android最多支持6个MenuItem，多了以后就摆在More里面。</p>

<h4>3、SubMenu类</h4>

<p>　　一个SubMenu对象代表一个子菜单，可以理解为菜单的菜单，即Menu对象点进去弹出来的就叫子菜单，每个SubMenu实例代表一个子菜单，常用的方法如下</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/292326297037235.png" alt="image" /></p>

<p>一般用法：</p>

<ul>
<li>1、在主Activity中覆盖onCreateOptionsMenu(Menu menu)方法,子菜单也在这里添加</li>
<li>2、如果要添加点击事件，则要覆盖onOptionsItemSelected(MenuItem item)方法</li>
</ul>


<h2>二、上下文菜单</h2>

<p>　　Context Menu类似于电脑上的右键，长按某个View之后弹出来的菜单。也是继承自Menu，不同于选项菜单，
选项菜单服务于Activity，而上下文是注册到某个VIew对象上的。如果一个View对象注册了上下文菜单，用户可以通过长按两秒该View对象调出上下文菜单。</p>

<p>用法同普通菜单，方法名称由Options替换Context</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/292327403289825.png" alt="image" /></p>

<h2>三、用XML配置菜单</h2>

<p>　　注意到新建项目的MainActivity 都会重写onCreateOptionsMenu方法
里面代码：
getMenuInflater().inflate(R.menu.main, menu);
就是通过XML来设置菜单的。</p>

<p>如下在res/menu/main.xml 就是本来的配置菜单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;menu</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;item</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/action_settings&quot;</span>
</span><span class='line'>        <span class="na">android:orderInCategory=</span><span class="s">&quot;100&quot;</span>
</span><span class='line'>        <span class="na">android:showAsAction=</span><span class="s">&quot;never&quot;</span>
</span><span class='line'>        <span class="na">android:title=</span><span class="s">&quot;@string/action_settings&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/menu&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他同再JAVA代码里的写法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习日记23--XML解析]]></title>
    <link href="http://chendd.github.io/blog/2013/03/29/android_study_23/"/>
    <updated>2013-03-29T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2013/03/29/android_study_23</id>
    <content type="html"><![CDATA[<h2>一、简述</h2>

<p>　　XML语言是跨平台，JAVA对XML语言支持得比较好，android系统的应用层平台是JAVA做的，所以用XML。
XML解析比较简单。XML解析就是将获取到的数据分离出来，基本的网络数据传输，需要使用XML
比如天气预报，从网上获取的是XML文件，通过XML解析可以把天气状态读出来
例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;forecast_date</span> <span class="na">data=</span><span class="s">&quot;2009-07-31&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;condition</span> <span class="na">data=</span><span class="s">&quot;晴&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;humidity</span> <span class="na">data=</span><span class="s">&quot;湿度： 65%&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可得到 2009-07-31 晴 湿度：65%</p>

<p>还有一作用是保存你的数据，比如做个旅游网站，你需要把全国各个省、城市名称写到XML文件进行保存，在程序中通过解析读取调用。</p>

<!--more-->


<p>Android 平台上可用的XML解析有三种</p>

<ul>
<li>1、Simple API for XML(SAX)</li>
<li>2、Document Object Model(DOM)</li>
<li>3、Android附带的pull解析器</li>
</ul>


<h2>二、实例</h2>

<p>分别用三种方法解析如下persons.xml文件（文件放在assert目录下）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;persons&gt;</span>
</span><span class='line'>    <span class="nt">&lt;person</span> <span class="na">id=</span><span class="s">&quot;23&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>liming<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;age&gt;</span>30<span class="nt">&lt;/age&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/person&gt;</span>
</span><span class='line'>    <span class="nt">&lt;person</span> <span class="na">id=</span><span class="s">&quot;20&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dehua<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;age&gt;</span>25<span class="nt">&lt;/age&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/person&gt;</span>
</span><span class='line'><span class="nt">&lt;/persons&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还需定义个javabean 用于存放解析出来的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">xml</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Short</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Short</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="n">Short</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//    @Override</span>
</span><span class='line'><span class="c1">//    public String toString() {</span>
</span><span class='line'><span class="c1">//        return &quot;id:&quot; + id + &quot;, name:&quot; + name + &quot;, age:&quot; + age;</span>
</span><span class='line'><span class="c1">//    }</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1、Simple API for XML(SAX)</h4>

<p>　　SAX是一个解析速度快并且占用内存少的XML解析器，很适合用于Android等移动设备。
SAX解析XML文件采用的是事件驱动，也就是说，它并不需要解析完整个文档，在按内容顺序解析文档的过程中，
SAX会判断当前读到的字符是否合法XML语法中的某部分，如果符合就会触发事件。所谓事件，其实就是一些回调（callback）方法，
这些方法(事件)定义在ContentHandler接口。</p>

<p>　　直接看代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">XMLContentHandler</span> <span class="kd">extends</span> <span class="n">DefaultHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">persons</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Person</span> <span class="n">currentPerson</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">tagName</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span><span class="c1">// 当前解析的元素标签    </span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;XMLContentHandler&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">getPersons</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">persons</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* </span>
</span><span class='line'><span class="cm">     * 接收文档的开始的通知。</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">startDocument</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SAXException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">persons</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;();</span>
</span><span class='line'>         <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;startDocument&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* </span>
</span><span class='line'><span class="cm">     * 结束文档的开始的通知。</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">endDocument</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SAXException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">endDocument</span><span class="o">();</span>
</span><span class='line'>         <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;endDocument&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* </span>
</span><span class='line'><span class="cm">     * 接收字符数据的通知。</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">characters</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">ch</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">SAXException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">tagName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">ch</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">tagName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">this</span><span class="o">.</span><span class="na">currentPerson</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">tagName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">this</span><span class="o">.</span><span class="na">currentPerson</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">Short</span><span class="o">.</span><span class="na">parseShort</span><span class="o">(</span><span class="n">data</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;characters(&quot;</span><span class="o">+</span><span class="n">ch</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">start</span><span class="o">+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">length</span><span class="o">+</span><span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * 接收元素开始的通知。</span>
</span><span class='line'><span class="cm">     * 参数意义如下： </span>
</span><span class='line'><span class="cm">     * namespaceURI：元素的命名空间 </span>
</span><span class='line'><span class="cm">     * localName ：元素的本地名称（不带前缀） </span>
</span><span class='line'><span class="cm">     * qName ：元素的限定名（带前缀）</span>
</span><span class='line'><span class="cm">     * atts ：元素的属性集合</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">startElement</span><span class="o">(</span><span class="n">String</span> <span class="n">namespaceURI</span><span class="o">,</span> <span class="n">String</span> <span class="n">localName</span><span class="o">,</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">qName</span><span class="o">,</span> <span class="n">Attributes</span> <span class="n">atts</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SAXException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">localName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentPerson</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">();</span>
</span><span class='line'>            <span class="n">currentPerson</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">atts</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">tagName</span> <span class="o">=</span> <span class="n">localName</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;startElement(&quot;</span><span class="o">+</span><span class="n">namespaceURI</span><span class="o">+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">localName</span><span class="o">+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">qName</span><span class="o">+</span><span class="n">atts</span><span class="o">+</span><span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* </span>
</span><span class='line'><span class="cm">     * 接收文档的结尾的通知。</span>
</span><span class='line'><span class="cm">     * 参数意义如下：</span>
</span><span class='line'><span class="cm">     * uri ：元素的命名空间</span>
</span><span class='line'><span class="cm">     * localName ：元素的本地名称（不带前缀）</span>
</span><span class='line'><span class="cm">     * name ：元素的限定名（带前缀）</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">endElement</span><span class="o">(</span><span class="n">String</span> <span class="n">uri</span><span class="o">,</span> <span class="n">String</span> <span class="n">localName</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">SAXException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">localName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">persons</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">currentPerson</span><span class="o">);</span>
</span><span class='line'>            <span class="n">currentPerson</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">tagName</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;endElement(&quot;</span><span class="o">+</span><span class="n">uri</span><span class="o">+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">localName</span><span class="o">+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2、Document Object Model(DOM)</h4>

<p>　　DOM解析XML文件时，会将XML文件的所有内容读取到内存中，然后允许您使用DOM API遍历XML树、检索所需的数据。
使用DOM操作XML的代码看起来比较直观，并且，在某些方面比基于SAX的实现更加简单。但是，因为DOM需要将XML文件的所有内容读取到内存中，
所以内存的消耗比较大，特别对于运行Android的移动设备来说，因为设备的资源比较宝贵，所以建议还是采用SAX来解析XML文件，
当然，如果XML文件的内容比较小采用DOM是可行的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DomParseXML</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">readXML</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">inStream</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">persons</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DocumentBuilderFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="n">DocumentBuilderFactory</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span><span class="c1">// 获取实例</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">DocumentBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">newDocumentBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Document</span> <span class="n">dom</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">inStream</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Element</span> <span class="n">root</span> <span class="o">=</span> <span class="n">dom</span><span class="o">.</span><span class="na">getDocumentElement</span><span class="o">();</span>
</span><span class='line'>            <span class="n">NodeList</span> <span class="n">items</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">getElementsByTagName</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">);</span><span class="c1">// 查找所有person节点</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 得到第一个person节点</span>
</span><span class='line'>                <span class="n">Element</span> <span class="n">personNode</span> <span class="o">=</span> <span class="o">(</span><span class="n">Element</span><span class="o">)</span> <span class="n">items</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 获取person节点的id属性值</span>
</span><span class='line'>                <span class="n">person</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="k">new</span> <span class="nf">Integer</span><span class="o">(</span><span class="n">personNode</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 获取person节点下的所有子节点(标签之间的空白节点和name/age元素)</span>
</span><span class='line'>                <span class="n">NodeList</span> <span class="n">childsNodes</span> <span class="o">=</span> <span class="n">personNode</span><span class="o">.</span><span class="na">getChildNodes</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">childsNodes</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="o">(</span><span class="n">Node</span><span class="o">)</span> <span class="n">childsNodes</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">j</span><span class="o">);</span> <span class="c1">// 判断是否为元素类型</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">getNodeType</span><span class="o">()</span> <span class="o">==</span> <span class="n">Node</span><span class="o">.</span><span class="na">ELEMENT_NODE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">Element</span> <span class="n">childNode</span> <span class="o">=</span> <span class="o">(</span><span class="n">Element</span><span class="o">)</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="c1">// 判断是否name元素</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">childNode</span><span class="o">.</span><span class="na">getNodeName</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                            <span class="c1">// 获取name元素下Text节点,然后从Text节点获取数据</span>
</span><span class='line'>                            <span class="n">person</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">childNode</span><span class="o">.</span><span class="na">getFirstChild</span><span class="o">()</span>
</span><span class='line'>                                    <span class="o">.</span><span class="na">getNodeValue</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">childNode</span><span class="o">.</span><span class="na">getNodeName</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="k">new</span> <span class="nf">Short</span><span class="o">(</span><span class="n">childNode</span><span class="o">.</span><span class="na">getFirstChild</span><span class="o">()</span>
</span><span class='line'>                                    <span class="o">.</span><span class="na">getNodeValue</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">persons</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">inStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">persons</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3、Android附带的pull解析器</h4>

<p>　　Pull解析和Sax解析很相似，都是轻量级的解析，在Android的内核中已经嵌入了Pull，所以我们不需要再添加第三方jar包来支持Pull。
Pull解析和Sax解析不一样的地方有(1)pull读取xml文件后触发相应的事件调用方法返回的是数字(2)pull可以在程序中控制想解析到哪里就可以停止解析。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PullParseXML</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">readXML</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">inStream</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">XmlPullParserException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">persons</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">XmlPullParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="n">Xml</span><span class="o">.</span><span class="na">newPullParser</span><span class="o">();</span>
</span><span class='line'>        <span class="n">parser</span><span class="o">.</span><span class="na">setInput</span><span class="o">(</span><span class="n">inStream</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">event</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">getEventType</span><span class="o">();</span><span class="c1">//产生第一个事件  </span>
</span><span class='line'>        <span class="k">while</span><span class="o">(</span><span class="n">event</span><span class="o">!=</span><span class="n">XmlPullParser</span><span class="o">.</span><span class="na">END_DOCUMENT</span><span class="o">){</span>
</span><span class='line'>            <span class="k">switch</span><span class="o">(</span><span class="n">event</span><span class="o">){</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">XmlPullParser</span><span class="o">.</span><span class="na">START_DOCUMENT</span><span class="o">:</span><span class="c1">//判断当前事件是否是文档开始事件  </span>
</span><span class='line'>                <span class="n">persons</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;();</span><span class="c1">//初始化Persons集合  </span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">XmlPullParser</span><span class="o">.</span><span class="na">START_TAG</span><span class="o">:</span><span class="c1">//判断当前事件是否是标签元素开始事件  </span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">getName</span><span class="o">())){</span><span class="c1">//判断开始标签元素是否是person  </span>
</span><span class='line'>                    <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">person</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">getAttributeValue</span><span class="o">(</span><span class="mi">0</span><span class="o">)));</span><span class="c1">//得到Person标签的属性值，并设置Person的id  </span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">person</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                    <span class="k">if</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">getName</span><span class="o">())){</span><span class="c1">//判断开始标签元素是否是name  </span>
</span><span class='line'>                        <span class="n">person</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">nextText</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span><span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">getName</span><span class="o">())){</span><span class="c1">//判断开始标签元素是否是price  </span>
</span><span class='line'>                        <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">Short</span><span class="o">.</span><span class="na">parseShort</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">nextText</span><span class="o">()));</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">XmlPullParser</span><span class="o">.</span><span class="na">END_TAG</span><span class="o">:</span><span class="c1">//判断当前事件是否是标签元素结束事件  </span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">getName</span><span class="o">())){</span><span class="c1">//判断结束标签元素是否是Person  </span>
</span><span class='line'>                    <span class="n">persons</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">person</span><span class="o">);</span><span class="c1">//将person添加到persons集合  </span>
</span><span class='line'>                    <span class="n">person</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">event</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">next</span><span class="o">();</span><span class="c1">//进入下一个元素并触发相应事件  </span>
</span><span class='line'>        <span class="o">}</span><span class="c1">//end while  </span>
</span><span class='line'>        <span class="k">return</span> <span class="n">persons</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行界面：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/291207400008256.png" alt="image" /></p>

<p>绑定按钮触发的事件代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sax_prase</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">sax_prase</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dom_parse</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">dom_parse</span><span class="o">);</span>
</span><span class='line'>        <span class="n">pull_parse</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">pull_parse</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">inStream</span> <span class="o">=</span> <span class="n">getAssets</span><span class="o">().</span><span class="na">open</span><span class="o">(</span><span class="s">&quot;persons.xml&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//绑定按钮监听器  </span>
</span><span class='line'>        <span class="n">sax_prase</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">persons</span> <span class="o">=</span> <span class="n">SaxParseXML</span><span class="o">(</span><span class="n">inStream</span><span class="o">);</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">persons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">getId</span><span class="o">()+</span><span class="s">&quot;:&quot;</span><span class="o">+</span><span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;:&quot;</span><span class="o">+</span><span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="c1">//绑定按钮监听器  </span>
</span><span class='line'>        <span class="n">dom_parse</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">DomParseXML</span> <span class="n">domParseXML</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DomParseXML</span><span class="o">();</span>
</span><span class='line'>                <span class="n">persons</span> <span class="o">=</span> <span class="n">domParseXML</span><span class="o">.</span><span class="na">readXML</span><span class="o">(</span><span class="n">inStream</span><span class="o">);</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">persons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">getId</span><span class="o">()+</span><span class="s">&quot;:&quot;</span><span class="o">+</span><span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;:&quot;</span><span class="o">+</span><span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">pull_parse</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">PullParseXML</span> <span class="n">pullParseXML</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PullParseXML</span><span class="o">();</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">persons</span> <span class="o">=</span> <span class="n">pullParseXML</span><span class="o">.</span><span class="na">readXML</span><span class="o">(</span><span class="n">inStream</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">XmlPullParserException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">persons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">getId</span><span class="o">()+</span><span class="s">&quot;:&quot;</span><span class="o">+</span><span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;:&quot;</span><span class="o">+</span><span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="nf">SaxParseXML</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">inStream</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">SAXParserFactory</span> <span class="n">spf</span> <span class="o">=</span> <span class="n">SAXParserFactory</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>            <span class="n">SAXParser</span> <span class="n">saxParser</span> <span class="o">=</span> <span class="n">spf</span><span class="o">.</span><span class="na">newSAXParser</span><span class="o">();</span> <span class="c1">// 创建解析器</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 设置解析器的相关特性，http://xml.org/sax/features/namespaces = true</span>
</span><span class='line'>            <span class="c1">// 表示开启命名空间特性,缺省情况设为true，设置使代码更具可读性,但我加进去报错，索性注释掉</span>
</span><span class='line'>            <span class="c1">//saxParser.setProperty(&quot;http://xml.org/sax/features/namespaces&quot;,true);</span>
</span><span class='line'>            <span class="n">XMLContentHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">XMLContentHandler</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">saxParser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">inStream</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span><span class='line'>            <span class="n">inStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="na">getPersons</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>分别点击三个按钮用不同方法解析出来的结果：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/291210425004835.png" alt="image" /></p>

<h2>三、总结</h2>

<p>　　对于三种解析XML方法，各有千秋，倾向于PULL解析器，因为SAX解析器操作起来太笨重，DOM不适合文档较大，内存较小的场景，
唯有Pull轻巧灵活，速度快，占用内存小，使用非常顺手，Pull解析可以用于很多场合，例如接受google天气，rss新闻等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习日记22--Animation动画简介]]></title>
    <link href="http://chendd.github.io/blog/2013/03/26/android_study_22/"/>
    <updated>2013-03-26T21:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2013/03/26/android_study_22</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;Animation动画主要有两种：帧动画(Frame Animation)和补间动画(Tween Animation)。
补间动画主要包括对位置、角度、尺寸等属性的变化，而帧动画则是通过若干帧图片轮流切换显示的。</p>

<h4>1、帧动画</h4>

<p>&#160; &#160; &#160; &#160;按顺序显示事先准备好的图片，跟动漫类似。主要用到的类AnimationDrawable，每个帧都是AnimationDrawable对象。
定义帧动画可以在代码直接进行。也可以通过XML文件定义，定义帧动画的文件存放在res/anim目录下。XML指定帧出现的顺序
及每个帧的持续时间。</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;帧动画XML主要标记和属性如下:</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/262025574051823.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;需要强调的是：启动Frame Animation动画的代码rocketAnimation.start();不能在OnCreate()中，因为在OnCreate()中
AnimationDrawable还没有完全的与ImageView绑定，在OnCreate()中启动动画，就只能看到第一张图片。这里实在拖曳事件中实现的。</p>

<p>&#160; &#160; &#160; &#160;AnimationDrawable的主要方法如下：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/262028348437192.png" alt="image" />
　　</p>

<p>&#160; &#160; &#160; &#160;帧动画使用例子</p>

<p>&#160; &#160; &#160; &#160;完整帧动画XML(frame_ani.xml)代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'> <span class="nt">&lt;animation-list</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>     <span class="na">android:oneshot=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish1&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish1&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish2&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish3&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish4&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish5&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish6&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish7&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish8&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/fish8&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;200&quot;</span> <span class="na">android:visible=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;/animation-list&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动帧动画JAVA代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>            <span class="c1">//重写onClick方法</span>
</span><span class='line'>      <span class="n">ImageView</span> <span class="n">iv</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">iv</span><span class="o">);</span>
</span><span class='line'>      <span class="n">iv</span><span class="o">.</span><span class="na">setBackgroundResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">frame_ani</span><span class="o">);</span>
</span><span class='line'>      <span class="n">AnimationDrawable</span> <span class="n">ad</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnimationDrawable</span><span class="o">)</span><span class="n">iv</span><span class="o">.</span><span class="na">getBackground</span><span class="o">();</span>
</span><span class='line'>      <span class="n">ad</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>        <span class="c1">//启动AnimationDrawable</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>点击按钮，启动帧动画，可以看见不同fish图片的切换，鱼儿在游动(自己脑补哈)。</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/262029485935994.png" alt="image" /></p>

<h4>2、补间动画</h4>

<p>&#160; &#160; &#160; &#160;补间动画作用于View视图，主要包括对View对象的位置、尺寸、旋转角度、透明度的变化。补间动画涉及的类主要有Animation、AnimationSet等。
&#160; &#160; &#160; &#160;补间动画同帧动画可以在代码直接进行。也可以通过XML文件定义，推荐用XML，因为这样可读性比较高和利于扩展。
XML文件存放在res/anim下。</p>

<p>　　补间动画XML几种变化标记和属性如下:</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/262034318435727.png" alt="image" /></p>

<p>　　公有属性如下：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/262034454364374.png" alt="image" />　</p>

<p>　　补间动画使用例子：</p>

<p>完整补间动画XML代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><span class="c">&lt;!-- XML的版本以及编码方式 --&gt;</span>
</span><span class='line'><span class="nt">&lt;set</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;alpha</span>
</span><span class='line'>    <span class="na">android:fromAlpha=</span><span class="s">&quot;0.0&quot;</span>
</span><span class='line'>    <span class="na">android:toAlpha=</span><span class="s">&quot;1.0&quot;</span>
</span><span class='line'>    <span class="na">android:duration=</span><span class="s">&quot;6000&quot;</span>
</span><span class='line'>  <span class="nt">/&gt;</span> <span class="c">&lt;!-- 透明度的变换 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scale</span>
</span><span class='line'>    <span class="na">android:interpolator=</span> <span class="s">&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span>
</span><span class='line'>    <span class="na">android:fromXScale=</span><span class="s">&quot;0.0&quot;</span>
</span><span class='line'>    <span class="na">android:toXScale=</span><span class="s">&quot;1.0&quot;</span>
</span><span class='line'>    <span class="na">android:fromYScale=</span><span class="s">&quot;0.0&quot;</span>
</span><span class='line'>    <span class="na">android:toYScale=</span><span class="s">&quot;1.0&quot;</span>
</span><span class='line'>    <span class="na">android:pivotX=</span><span class="s">&quot;50%&quot;</span>
</span><span class='line'>    <span class="na">android:pivotY=</span><span class="s">&quot;50%&quot;</span>
</span><span class='line'>    <span class="na">android:fillAfter=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>    <span class="na">android:duration=</span><span class="s">&quot;9000&quot;</span>
</span><span class='line'>  <span class="nt">/&gt;</span> <span class="c">&lt;!-- 尺寸的变换 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;translate</span>
</span><span class='line'>    <span class="na">android:fromXDelta=</span><span class="s">&quot;30&quot;</span>
</span><span class='line'>    <span class="na">android:toXDelta=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>    <span class="na">android:fromYDelta=</span><span class="s">&quot;30&quot;</span>
</span><span class='line'>    <span class="na">android:toYDelta=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>    <span class="na">android:duration=</span><span class="s">&quot;10000&quot;</span>
</span><span class='line'>  <span class="nt">/&gt;</span> <span class="c">&lt;!-- 尺位置的变换 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;rotate</span>
</span><span class='line'>    <span class="na">android:interpolator=</span><span class="s">&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span>
</span><span class='line'>    <span class="na">android:fromDegrees=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>    <span class="na">android:toDegrees=</span><span class="s">&quot;+360&quot;</span>
</span><span class='line'>    <span class="na">android:pivotX=</span><span class="s">&quot;50%&quot;</span>
</span><span class='line'>    <span class="na">android:pivotY=</span><span class="s">&quot;50%&quot;</span>
</span><span class='line'>    <span class="na">android:duration=</span><span class="s">&quot;10000&quot;</span>
</span><span class='line'>  <span class="nt">/&gt;</span> <span class="c">&lt;!-- 旋转变换 --&gt;</span>
</span><span class='line'><span class="nt">&lt;/set&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动补间动画JAVA代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>                <span class="c1">//重写onClick方法</span>
</span><span class='line'>       <span class="n">ImageView</span> <span class="n">iv</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">iv</span><span class="o">);</span>
</span><span class='line'>       <span class="n">Animation</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">AnimationUtils</span><span class="o">.</span><span class="na">loadAnimation</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">tween_ani</span><span class="o">);</span>
</span><span class='line'>       <span class="n">iv</span><span class="o">.</span><span class="na">startAnimation</span><span class="o">(</span><span class="n">animation</span><span class="o">);</span>            <span class="c1">//启动动画            </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>点击按钮，启动补间动画，可以看见螃蟹从中心慢慢旋转显现出来。</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/262039309214990.png" alt="image" /><img src="http://images.cnitblog.com/i/602984/201403/262039459996150.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
