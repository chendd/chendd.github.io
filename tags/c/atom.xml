<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: c | Chendd's Blog]]></title>
  <link href="http://chendd.github.io/tags/c/atom.xml" rel="self"/>
  <link href="http://chendd.github.io/"/>
  <updated>2017-10-09T17:52:50+08:00</updated>
  <id>http://chendd.github.io/</id>
  <author>
    <name><![CDATA[chendd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(五)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/22/learn_jni_5/"/>
    <updated>2016-04-22T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/22/learn_jni_5</id>
    <content type="html"><![CDATA[<p>注册native函数有两种方法：静态注册和动态注册。</p>

<h4>1、静态注册方法</h4>

<p>&#160; &#160; &#160; &#160;根据函数名找到对应的JNI函数:Java层调用函数时，会从对应的JNI中寻找该函数，如果没有就会报错，如果存在则会建立一个关联联系，以后在调用时会直接使用这个函数，这部分的操作由虚拟机完成。
静态方法就是根据函数名来遍历java和jni函数之间的关联，而且要求jni层函数的名字必须遵循
特定的格式，其缺点在于：</p>

<ul>
<li>1）javah生成的jni层函数特别长；</li>
<li>2）初次调用native函数时要根据名字搜索对应的jni层函数来建立关联联系，这样影响效率。</li>
</ul>


<!--more-->


<h4>2、动态注册方法</h4>

<p>&#160; &#160; &#160; &#160;JNI 允许你提供一个函数映射表，注册给Jave虚拟机，这样Jvm就可以用函数映射表来调用相应的函数，
就可以不必通过函数名来查找需要调用的函数了。
Java与JNI通过JNINativeMethod的结构来建立联系，它在jni.h中被定义，其结构内容如下：
typedef struct {
const char<em> name;
const char</em> signature;
void* fnPtr;
} JNINativeMethod;
第一个变量name是Java中函数的名字。
第二个变量signature，用字符串是描述了函数的参数和返回值
第三个变量fnPtr是函数指针，指向C函数。
当java通过System.loadLibrary加载完JNI动态库后，紧接着会查找一个JNI_OnLoad的函数，如果有，就调用它，
而动态注册的工作就是在这里完成的。</p>

<ul>
<li><p>1)JNI_OnLoad()函数
JNI_OnLoad()函数在VM执行System.loadLibrary(xxx)函数时被调用，它有两个重要的作用：
指定JNI版本：告诉VM该组件使用那一个JNI版本(若未提供JNI_OnLoad()函数，VM会默认该使用最老的JNI 1.1版)，如果要使用新版本的JNI，
例如JNI 1.4版，则必须由JNI_OnLoad()函数返回常量JNI_VERSION_1_4(该常量定义在jni.h中) 来告知VM。
初始化设定，当VM执行到System.loadLibrary()函数时，会立即先呼叫JNI_OnLoad()方法，因此在该方法中进行各种资源的初始化操作最为恰当，</p></li>
<li><p>2)RegisterNatives
RegisterNatives在AndroidRunTime里定义
syntax:
jint RegisterNatives(jclass clazz, const JNINativeMethod* methods,jint nMethods)</p></li>
</ul>


<h4>3、在android中加入自定义的native函数</h4>

<p>JNI在Android层次结构中的作用如下图所示:</p>

<p><img src="http://s5.sinaimg.cn/mw690/4ad7c254gx6DrPFbSBK14&amp;690?_=5355241" alt="image" /></p>

<p>在Android中，主要的JNI代码在以下的路径中:
Android源码根目录/frameworks/base/core/jni/
这个路径中的内容将被编译成库libandroid_runtime.so,这就是一个普通的动态库，被放置在目标系统的/system/lib目录中.除此之外，Android还包含其他的JNI库，例如,媒体部分的JNI目录frameworks/base/media/jni/中，被编译成库libmedia_jni.so.
JNI中的各个文件实际上就是C++的普通文件，其命名一般和支持的Java类有对应关系。
这种关系是习惯上的写法，而不是强制的。</p>

<ul>
<li>1）注册JNI方法</li>
</ul>


<p>在Android源码根目录/frameworks/base/services/jni/目录下有一个onload.cpp文件，加入 jni函数申明和jni函数注册方法</p>

<pre><code class="c">#include "JNIHelp.h"   
#include "jni.h"   
#include "utils/Log.h"   
#include "utils/misc.h"   

namespace android {  
int register_android_server_AlarmManagerService(JNIEnv* env);  
int register_android_server_BatteryService(JNIEnv* env);  
int register_android_server_InputApplicationHandle(JNIEnv* env);  
int register_android_server_InputWindowHandle(JNIEnv* env);  
int register_android_server_InputManager(JNIEnv* env);  
int register_android_server_LightsService(JNIEnv* env);  
int register_android_server_PowerManagerService(JNIEnv* env);  
int register_android_server_UsbDeviceManager(JNIEnv* env);  
int register_android_server_UsbHostManager(JNIEnv* env);  
int register_android_server_VibratorService(JNIEnv* env);  
int register_android_server_SystemServer(JNIEnv* env);  
int register_android_server_location_GpsLocationProvider(JNIEnv* env);  
int register_android_server_connectivity_Vpn(JNIEnv* env);  
int register_android_server_HelloService(JNIEnv *env);  //此处加入自定义jni函数申明
};  

using namespace android;  

extern "C" jint JNI_OnLoad(JavaVM* vm, void* reserved)  
{  
    JNIEnv* env = NULL;  
    jint result = -1;  

    if (vm-&gt;GetEnv((void**) &amp;env, JNI_VERSION_1_4) != JNI_OK) {  
        LOGE("GetEnv failed!");  
        return result;  
    }  
    LOG_ASSERT(env, "Could not retrieve the env!");  

    register_android_server_PowerManagerService(env);  
    register_android_server_InputApplicationHandle(env);  
    register_android_server_InputWindowHandle(env);  
    register_android_server_InputManager(env);  
    register_android_server_LightsService(env);  
    register_android_server_AlarmManagerService(env);  
    register_android_server_BatteryService(env);  
    register_android_server_UsbDeviceManager(env);  
    register_android_server_UsbHostManager(env);  
    register_android_server_VibratorService(env);  
    register_android_server_SystemServer(env);  
    register_android_server_location_GpsLocationProvider(env);  
    register_android_server_connectivity_Vpn(env);  
    register_android_server_HelloService(env); //jni方法注册

    return JNI_VERSION_1_4;  
}  
</code></pre>

<p>onload.cpp文件上部分为注册函数的声明，下部分为调用各种注册函数，而这些注册函数就是JNI方法的注册函数! 正是通过这些注册函数，上层才能调用注册的JNI方法.
以register_android_server_HelloService为例，来看一个注册函数的具体实现过程是如何的。
打开com_android_service_HelloService.cpp文件</p>

<ul>
<li>2)加入注册函数的实现代码，如下:</li>
</ul>


<pre><code class="c">int register_android_server_HelloService(JNIEnv *env) {  
        return jniRegisterNativeMethods(env, "com/android/server/HelloService", method_table, NELEM(method_table));  
}  
</code></pre>

<p>其中jniRegisterNativeMethods为注册JNI方法函数，
此函数的第二个参数为对应着java类即HelloService.java的文件名，第三个参数为注册的方法表</p>

<ul>
<li>3)加入jni方法表</li>
</ul>


<pre><code class="c">static const JNINativeMethod method_table[] = {  
    {"init_native", "()Z", (void*)hello_init},  
    {"setVal_native", "(I)V", (void*)hello_setVal},  
    {"getVal_native", "()I", (void*)hello_getVal},  
};  
</code></pre>

<ul>
<li>4）方法表内各个接口的实现代码</li>
</ul>


<pre><code class="c">static void hello_setVal(JNIEnv* env, jobject clazz, jint value) {  
     val = value;  
    LOGI("Hello JNI: set value %d to device.", val);  
}  
static jint hello_getVal(JNIEnv* env, jobject clazz) {  
        LOGI("Hello JNI: get value %d from device.", val);  
        return val;  
    } 
static jboolean hello_init(JNIEnv* env, jclass clazz) {  
        LOGI("Hello JNI: initializing......");  
        return -1;        
    } 
</code></pre>

<p>完整代码如下：</p>

<pre><code class="c">namespace android
{
  int val;
  static void hello_setVal(JNIEnv* env, jobject clazz, jint value) {  
     val = value;  
    LOGI("Hello JNI: set value %d to device.", val);  
  }  
  static jint hello_getVal(JNIEnv* env, jobject clazz) {  
        LOGI("Hello JNI: get value %d from device.", val);  
        return val;  
    } 
 static jboolean hello_init(JNIEnv* env, jclass clazz) {  
        LOGI("Hello JNI: initializing......");  
        return -1;        
    } 
  static const JNINativeMethod method_table[] = {  
    {"init_native", "()Z", (void*)hello_init},  
    {"setVal_native", "(I)V", (void*)hello_setVal},  
    {"getVal_native", "()I", (void*)hello_getVal},  
   }; 
   int register_android_server_HelloService(JNIEnv *env) {  
        return jniRegisterNativeMethods(env, "com/android/server/HelloService", method_table, NELEM(method_table));  
   }  
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(四)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/17/learn_jni_4/"/>
    <updated>2016-04-17T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/17/learn_jni_4</id>
    <content type="html"><![CDATA[<h2>一、jni调用java对象</h2>

<p>&#160; &#160; &#160; &#160;JNI提供的功能之一是在本地代码中使用Java对象。包括：创建一个java类对象和通过函数传递一个java对象。创建一个java类对象，首先需要得到得到使用FindClass/GetObjectClass函数得到该类，然后使用GetMethodID方法得到该类的方法id,然后调用该函数。 Java 和 Native 代码之间函数调用时，如果是简单类型，也就是内置类型，比如 int, char 等是值传递（pass by value），而其它 Java 对象都是引用传递（pass by reference），这些对象引用由 JVM 传给 Native 代码。</p>

<p>在本地方法中调用Java对象的方法的步骤：</p>

<ul>
<li>1）获取你需要访问的Java对象的类
FindClass通过传java中完整的类名来查找java的class
GetObjectClass通过传入jni中的一个java的引用来获取该引用的类型。
他们之间的区别是，前者要求你必须知道完整的类名，后者要求在Jni有一个类的引用。</li>
<li>2）获取MethodID,调用方法
GetMethodID 得到一个实例的方法的ID
GetStaticMethodID 得到一个静态方法的ID</li>
<li>3)获取对象的属性
GetFieldID 得到一个实例的域的ID
GetStaticFieldID 得到一个静态的域的ID
JNI通过ID识别域和方法，一个域或方法的ID是任何处理域和方法的函数的必须参数。</li>
</ul>


<!--more-->


<h2>二、jni中引用的java对象的生命周期</h2>

<p>&#160; &#160; &#160; &#160;Java对象做为引用被传递到本地方法中，所有这些Java对象的引用都有一个共同的父类型jobject(相当于java中的 Object类是所有类的父类一样)。 这些对象引用都有其生命周期。在JNI中对Java对象的引用根据生命周期分为:全局引用，局部引用、弱全局引用</p>

<ul>
<li><p>1、Local Reference 本地引用，
函数调用时传入jobject或者jni函数创建的jobejct，都是本地引用.
其特点就是一旦JNI层函数返回，jobject就被垃圾回收掉，所以需要注意其生命周期。可以强制调用DeleteLocalRef进行立即回收。
jstring pathStr = env->NewStringUTF(path)
&hellip;.
env->DeleteLocalRef(pathStr);</p></li>
<li><p>2、Global Reference 全局引用 ，这种对象如不主动释放，它永远都不会被垃圾回收
创建： env->NewGlobalRef(obj);
释放： env->DeleteGlobalRef(obj)
若要在某个 Native 代码返回后，还希望能继续使用 JVM 提供的参数, 或者是过程中调用 JNI 函数的返回值（比如 g_mid）， 则将该对象设为 global reference，以后只能使用这个 global reference；若不是一个 jobject，则无需这么做。</p></li>
<li><p>3、Weak Global Reference 弱全局引用
一种特殊的 Global Reference ,在运行过程中可能被垃圾回收掉，所以使用时请务必注意其生命周期及随时可能被垃圾回收掉,比如内存不足时。
使用前可以利用JNIEnv的 IsSameObject 进行判定它是否被回收
env->IsSameObject(obj1,obj2);</p></li>
</ul>


<h2>三、本地线程中调用java对象</h2>

<ul>
<li>问题1：
JNIEnv是一个线程相关的变量
JNIEnv 对于每个 thread 而言是唯一的
JNIEnv *env指针不可以为多个线程共用</li>
<li>解决办法：
但是java虚拟机的JavaVM指针是整个jvm公用的，我们可以通过JavaVM来得到当前线程的JNIEnv指针.
可以使用javaAttachThread保证取得当前线程的Jni环境变量
static JavaVM *gs_jvm=NULL;
gs_jvm->AttachCurrentThread((void **)&amp;env, NULL);//附加当前线程到一个Java虚拟机
jclass cls = env->GetObjectClass(gs_object);
jfieldID fieldPtr = env->GetFieldID(cls,&ldquo;value&rdquo;,&ldquo;I&rdquo;);</li>
<li>问题2：
不能直接保存一个线程中的jobject指针到全局变量中,然后在另外一个线程中使用它。</li>
<li>解决办法：
用env->NewGlobalRef创建一个全局变量，将传入的obj(局部变量)保存到全局变量中,其他线程可以使用这个全局变量来操纵这个java对象
注意：若不是一个 jobject，则不需要这么做。如：
jclass 是由 jobject public 继承而来的子类，所以它当然是一个 jobject，需要创建一个 global reference 以便日后使用。
而 jmethodID/jfieldID 与 jobject 没有继承关系，它不是一个 jobject，只是个整数，所以不存在被释放与否的问题，可保存后直接使用。
static jobject gs_object=NULL;
JNIEXPORT void JNICALL Java_Test_setEnev(JNIEnv *env, jobject obj)
{
  env->GetJavaVM(&amp;gs_jvm); //保存到全局变量中JVM
  //直接赋值obj到全局变量是不行的,应该调用以下函数:
  gs_object=env->NewGlobalRef(obj);
}</li>
</ul>


<p>jni部分代码如下:</p>

<pre><code class="c">#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;unistd.h&gt;
#include&lt;pthread.h&gt;
#include&lt;jni.h&gt;
#include&lt;android/log.h&gt;
#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, "native-activity", __VA_ARGS__))
#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, "native-activity", __VA_ARGS__))
#define LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR, "native-activity", __VA_ARGS__))

//全局变量
JavaVM *g_jvm = NULL;
jobject g_obj = NULL;
void *thread_fun(void* arg)
 {
     JNIEnv *env;
     jclass cls;
     jmethodID mid;

     //Attach主线程
     if((*g_jvm)-&gt;AttachCurrentThread(g_jvm, &amp;env, NULL) != JNI_OK)
     {
         LOGE("%s: AttachCurrentThread() failed", __FUNCTION__);
         return NULL;
     }
     //找到对应的类
     cls = (*env)-&gt;GetObjectClass(env,g_obj);
     if(cls == NULL)
     {
         LOGE("FindClass() Error.....");
         goto error;
     }
     //再获得类中的方法
     mid = (*env)-&gt;GetMethodID(env, cls, "fromJNI", "(I)V");
     if (mid == NULL)
     {
         LOGE("GetMethodID() Error.....");
         goto error; 
     }
     //最后调用java中的静态方法
         (*env)-&gt;CallVoidMethod(env, cls, mid ,(int)arg);


 error:   
     //Detach主线程
     if((*g_jvm)-&gt;DetachCurrentThread(g_jvm) != JNI_OK)
     {
         LOGE("%s: DetachCurrentThread() failed", __FUNCTION__);
     }


     pthread_exit(0);
 }

 //由java调用以创建子线程
 JNIEXPORT void Java_com_test_JniThreadTestActivity_mainThread( JNIEnv* env, jobject obj, jint threadNum)
 {
     int i;
     pthread_t* pt;
     pt = (pthread_t*) malloc(threadNum * sizeof(pthread_t));
     for (i = 0; i &lt; threadNum; i++){
         //创建子线程
        pthread_create(&amp;pt[i], NULL, &amp;thread_fun, (void *)i);
}

for (i = 0; i &lt; threadNum; i++){
pthread_join (pt[i], NULL);
}
LOGE("main thread exit.....");
}


//由java调用来建立JNI环境
JNIEXPORT void Java_com_test_JniThreadTestActivity_setJNIEnv( JNIEnv* env, jobject obj)
 {
     //保存全局JVM以便在子线程中使用
     (*env)-&gt;GetJavaVM(env,&amp;g_jvm);
     //不能直接赋值(g_obj = obj)
     g_obj = (*env)-&gt;NewGlobalRef(env,obj);
 }


 //当动态库被加载时这个函数被系统调用
 JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved)
 {
     JNIEnv* env = NULL;
     jint result = -1;   

     //获取JNI版本
     if ((*vm)-&gt;GetEnv(vm, (void**)&amp;env, JNI_VERSION_1_4) != JNI_OK)
     {
         LOGE("GetEnv failed!");
             return result;
     }

     return JNI_VERSION_1_4;
 }
</code></pre>

<p>需要全部源码的,可以打开这个链接下载
<a href="http://download.csdn.net/detail/mfcai_blog/5772377">http://download.csdn.net/detail/mfcai_blog/5772377</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(三)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/12/learn_jni_3/"/>
    <updated>2016-04-12T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/12/learn_jni_3</id>
    <content type="html"><![CDATA[<h2>一、涉及到的jni编程知识</h2>

<p>&#160; &#160; &#160; &#160;Java基本类型的数组，在JNI中都是jArray的类型格式。具体类型如下：</br>
typedef jarray jbooleanArray;</br>
typedef jarray jbyteArray;</br>
typedef jarray jcharArray;</br>
typedef jarray jshortArray;</br>
typedef jarray jintArray;</br>
typedef jarray jlongArray;</br>
typedef jarray jfloatArray;</br>
typedef jarray jdoubleArray;</br>
typedef jarray jobjectArray;</p>

<!--more-->


<p>&#160; &#160; &#160; &#160;jArray类型JNI定义的类型，通过它JNIEnv可以操作Java数组，但它并不是C/C++的数组，所以我们要把jArray类型转换为C/C++中的数组。
JNIEnv定义了一系列的方法来把一个jArray类型转换为C/C++数组，和把C/C++数组转换为jArray</p>

<h4>1、Java基本类型的数组转换成相应的C数组类型</h4>

<p>jboolean<em>   （</em>GetBooleanArrayElements）（JNIEnv<em>， jbooleanArray， jboolean</em>）;</br>
jbyte<em>      （</em>GetByteArrayElements）（JNIEnv<em>， jbyteArray， jboolean</em>）;</br>
jchar<em>      （</em>GetCharArrayElements）（JNIEnv<em>， jcharArray， jboolean</em>）;</br>
jshort<em>     （</em>GetShortArrayElements）（JNIEnv<em>， jshortArray， jboolean</em>）;</br>
jint<em>       （</em>GetIntArrayElements）（JNIEnv<em>， jintArray， jboolean</em>）;</br>
jlong<em>      （</em>GetLongArrayElements）（JNIEnv<em>， jlongArray， jboolean</em>）;</br>
jfloat<em>     （</em>GetFloatArrayElements）（JNIEnv<em>， jfloatArray， jboolean</em>）;</br>
jdouble<em>    （</em>GetDoubleArrayElements）（JNIEnv<em>， jdoubleArray， jboolean</em>);</br></p>

<p>参数：
env：JNI 接口指针。      <br/>
array：Java 字符串对象。      <br/>
isCopy：指向布尔值的指针。      <br/>
返回值：      <br/>
返回指向数组元素的指针，如果操作失败，则为 NULL。</p>

<h4>2、获取数组的长度:</h4>

<p>jsize       （<em>GetArrayLength）（JNIEnv</em>， jarray）;</br></p>

<h4>3、释放C/C++的数组内存</h4>

<p>void        （<em>ReleaseBooleanArrayElements）（JNIEnv</em>， jbooleanArray，jboolean<em>， jint）; </br>
void        （</em>ReleaseByteArrayElements）（JNIEnv<em>， jbyteArray，jbyte</em>， jint）;</br>
void        （<em>ReleaseCharArrayElements）（JNIEnv</em>， jcharArray，jchar<em>， jint）;</br>
void        （</em>ReleaseShortArrayElements）（JNIEnv<em>， jshortArray，jshort</em>， jint）;</br>
void        （<em>ReleaseIntArrayElements）（JNIEnv</em>， jintArray，jint<em>， jint）;</br>
void        （</em>ReleaseLongArrayElements）（JNIEnv<em>， jlongArray，jlong</em>， jint）;</br>
void        （<em>ReleaseFloatArrayElements）（JNIEnv</em>， jfloatArray，jfloat<em>， jint）;</br>
void        （</em>ReleaseDoubleArrayElements）（JNIEnv<em>， jdoubleArray，jdouble</em>， jint）;</br>
参数：      <br/>
env：JNI 接口指针。      <br/>
array：Java 数组对象。      <br/>
elems：指向数组元素的指针。      <br/>
mode：释放模式。</p>

<h4>4、构造一个指定长度的Java基本类型的数组</h4>

<p>jbooleanArray （<em>NewBooleanArray）（JNIEnv</em>， jsize）;</br>
jbyteArray    （<em>NewByteArray）（JNIEnv</em>， jsize）;</br>
jcharArray    （<em>NewCharArray）（JNIEnv</em>， jsize）;</br>
jshortArray   （<em>NewShortArray）（JNIEnv</em>， jsize）;</br>
jintArray     （<em>NewIntArray）（JNIEnv</em>， jsize）;</br>
jlongArray    （<em>NewLongArray）（JNIEnv</em>， jsize）;</br>
jfloatArray   （<em>NewFloatArray）（JNIEnv</em>， jsize）;</br>
jdoubleArray  （<em>NewDoubleArray）（JNIEnv</em>， jsize）; </br></p>

<h4>5、给java基本类型的数组赋值</h4>

<p>void  （<em>SetBooleanArrayRegion）（JNIEnv</em>， jbooleanArray，jsize， jsize， const jboolean<em>）;</br>
void  （</em>SetByteArrayRegion）（JNIEnv<em>， jbyteArray，jsize， jsize， const jbyte</em>）;</br>
void  （<em>SetCharArrayRegion）（JNIEnv</em>， jcharArray，jsize， jsize， const jchar<em>）;</br>
void  （</em>SetShortArrayRegion）（JNIEnv<em>， jshortArray，jsize， jsize， const jshort</em>）;</br>
void  （<em>SetIntArrayRegion）（JNIEnv</em>， jintArray，jsize， jsize， const jint<em>）;</br>
void  （</em>SetLongArrayRegion）（JNIEnv<em>， jlongArray，jsize， jsize， const jlong</em>）;</br>
void  （<em>SetFloatArrayRegion）（JNIEnv</em>， jfloatArray，jsize， jsize， const jfloat<em>）;</br>
void  （</em>SetDoubleArrayRegion）（JNIEnv<em>， jdoubleArray， jsize， jsize， const jdouble</em>）; </br>
把java基本类型的数组中的指定范围的元素用C/C++的数组中的元素来赋值
参数：      <br/>
env：JNI 接口指针。      <br/>
array:  Java 数组。      <br/>
start：起始下标。      <br/>
len：要复制的元素数。      <br/>
buf：源缓冲区。      <br/>
抛出：      <br/>
ArrayIndexOutOfBoundsException：如果区域中的某个下标无效。
注意：
如果是c程序，要用 (<em>env)->
如果是C++要用 env->
在linux下如果.c文件中用 “env->” 编译会找不到此结构，必须用“(</em>env)->”，或者改成.cpp文件，以 c++的方式来编译。
具体请看一下jni.h的代码。另外还有些省略的内容，可以参考JNI的文档：Java Native Interface 6.0 Specification，在JDK的文档里就可以找到。如果要进行更深入的JNI编程，需要仔细阅读这个文档</p>

<h2>二、图像灰度化</h2>

<p>&#160; &#160; &#160; &#160;彩色转灰度的著名心理学公式：Gray = R<em>0.299 + G</em>0.587 + B*0.114
实际应用中为了避免浮点运算，然后就有了移位运算代替了。
2至20位精度的系数：</p>

<pre><code class="java">Gray = (R*1 + G*2 + B*1) &gt;&gt; 2 
Gray = (R*2 + G*5 + B*1) &gt;&gt; 3 
Gray = (R*4 + G*10 + B*2) &gt;&gt; 4 
Gray = (R*9 + G*19 + B*4) &gt;&gt; 5 
Gray = (R*19 + G*37 + B*8) &gt;&gt; 6 
Gray = (R*38 + G*75 + B*15) &gt;&gt; 7 
Gray = (R*76 + G*150 + B*30) &gt;&gt; 8 
Gray = (R*153 + G*300 + B*59) &gt;&gt; 9 
Gray = (R*306 + G*601 + B*117) &gt;&gt; 10 
Gray = (R*612 + G*1202 + B*234) &gt;&gt; 11 
Gray = (R*1224 + G*2405 + B*467) &gt;&gt; 12 
Gray = (R*2449 + G*4809 + B*934) &gt;&gt; 13 
Gray = (R*4898 + G*9618 + B*1868) &gt;&gt; 14 
Gray = (R*9797 + G*19235 + B*3736) &gt;&gt; 15 
Gray = (R*19595 + G*38469 + B*7472) &gt;&gt; 16 
Gray = (R*39190 + G*76939 + B*14943) &gt;&gt; 17 
Gray = (R*78381 + G*153878 + B*29885) &gt;&gt; 18 
Gray = (R*156762 + G*307757 + B*59769) &gt;&gt; 19 
Gray = (R*313524 + G*615514 + B*119538) &gt;&gt; 20
</code></pre>

<h2>三、灰度化代码实现</h2>

<pre><code class="java">JNIEXPORT jintArray JNICALL Java_org_join_image_util_JoinImage_imgToGray( 
        JNIEnv* env, jobject obj, jintArray buf, int w, int h) { 
    LOGE("==imgToGray=="); 

    jint * cbuf; 
    cbuf = (*env)-&gt;GetIntArrayElements(env, buf, 0); // 获取int数组元素 

    int alpha = 0xFF; // 不透明值 
    int i, j, color, red, green, blue; 
    for (i = 0; i &lt; h; i++) { 
        for (j = 0; j &lt; w; j++) { 
            color = cbuf[w * i + j]; // 获得color值 
            red = (color &gt;&gt; 16) &amp; 0xFF; // 获得red值 
            green = (color &gt;&gt; 8) &amp; 0xFF; // 获得green值 
            blue = color &amp; 0xFF; // 获得blue值 
            color = (red * 38 + green * 75 + blue * 15) &gt;&gt; 7; // 灰度算法（16位运算下7位精度） 
            color = (alpha &lt;&lt; 24) | (color &lt;&lt; 16) | (color &lt;&lt; 8) | color; // 由ARGB组成新的color值 
            cbuf[w * i + j] = color; // 设置新color值 
        } 
    } 

    int size = w * h; 
    jintArray result = (*env)-&gt;NewIntArray(env, size); // 新建一个jintArray 
    (*env)-&gt;SetIntArrayRegion(env, result, 0, size, cbuf); // 将cbuf转存入result 
    (*env)-&gt;ReleaseIntArrayElements(env, buf, cbuf, 0); // 释放int数组元素 
    return result; 
} 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(二)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/09/learn_jni_2/"/>
    <updated>2016-04-09T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/09/learn_jni_2</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等。要掌握jni，就必须熟练掌握Android.mk的语法规范。</p>

<!--more-->


<h2>一、Android.mk文件的用途</h2>

<p>&#160; &#160; &#160; &amp;#160一个android子项目中会存在一个或多个Android.mk文件</p>

<h4>1、单一的Android.mk文件</h4>

<p>直接参考NDK的sample目录下的hello-jni项目，在这个项目中只有一个Android.mk文件</p>

<h4>2、多个Android.mk文件</h4>

<p>如果需要编译的模块比较多，我们可能会将对应的模块放置在相应的目录中，
这样，我们可以在每个目录中定义对应的Android.mk文件（类似于上面的写法），
最后，在根目录放置一个Android.mk文件，内容如下：
include $(call all-subdir-makefiles)
只需要这一行就可以了，它的作用就是包含所有子目录中的Android.mk文件</p>

<h4>3、多个模块共用一个Android.mk</h4>

<p>这个文件允许你将源文件组织成模块，这个模块中含有：
  -静态库(.a文件)
  -动态库(.so文件)
只有共享库才能被安装/复制到您的应用软件（APK）包中
include $(BUILD_STATIC_LIBRARY)，编译出的是静态库
include $(BUILD_SHARED_LIBRARY)，编译出的是动态库</p>

<h2>二、自定义变量</h2>

<p> 以下是在 Android.mk中依赖或定义的变量列表，可以定义其他变量为自己使用，但是NDK编译系统保留下列变量名：</p>

<ul>
<li>以 LOCAL_开头的名字（例如 LOCAL_MODULE）</li>
<li>以 PRIVATE<em>, NDK</em> 或 APP_开头的名字（内部使用）</li>
<li>小写名字（内部使用，例如‘my-dir’）</li>
</ul>


<p>  如果为了方便在 Android.mk 中定义自己的变量，建议使用 MY_前缀，一个小例子：
MY_SOURCES := foo.c
ifneq ($(MY_CONFIG_BAR),)
 MY_SOURCES += bar.c
endif
LOCAL_SRC_FILES += $(MY_SOURCES)
注意：‘:=’是赋值的意思；'+=&lsquo;是追加的意思；‘$’表示引用某变量的值。</p>

<h2>三、GNU Make系统变量</h2>

<p>  这些 GNU Make变量在你的 Android.mk 文件解析之前，就由编译系统定义好了。注意在某些情况下，NDK可能分析 Android.mk 几次，每一次某些变量的定义会有不同。</p>

<ul>
<li><p>1、CLEAR_VARS:
指向一个编译脚本，几乎所有未定义的 LOCAL_XXX 变量都在"Module-description"节中列出。必须在开始一个新模块之前包含这个脚本：include$(CLEAR_VARS)，用于重置除LOCAL_PATH变量外的，所有LOCAL_XXX系列变量。</p></li>
<li><p>2、BUILD_SHARED_LIBRARY:<br/>
指向编译脚本，根据所有的在 LOCAL_XXX 变量把列出的源代码文件编译成一个共享库。
     注意，必须至少在包含这个文件之前定义 LOCAL_MODULE 和 LOCAL_SRC_FILES。</p></li>
<li>3、BUILD_STATIC_LIBRARY:
一个 BUILD_SHARED_LIBRARY 变量用于编译一个静态库。静态库不会复制到的APK包中，但是能够用于编译共享库。
     示例：include $(BUILD_STATIC_LIBRARY)
     注意，这将会生成一个名为 lib$(LOCAL_MODULE).a 的文件</li>
<li><p>4、TARGET_ARCH:
目标 CPU平台的名字</p></li>
<li><p>5、TARGET_PLATFORM:
Android.mk 解析的时候，目标 Android 平台的名字.详情可考/development/ndk/docs/stable- apis.txt.
     android-3 -> Official Android 1.5 system images
     android-4 -> Official Android 1.6 system images
     android-5 -> Official Android 2.0 system images</p></li>
<li>6、TARGET_ARCH_ABI:<br/>
暂时只支持两个 value，armeabi 和 armeabi-v7a。。</li>
<li>7、TARGET_ABI:
目标平台和 ABI 的组合，</li>
</ul>


<h2>四、模块描述变量</h2>

<p>  下面的变量用于向编译系统描述你的模块。应该定义在'include  $(CLEAR_VARS)&lsquo;和'include $(BUILD_XXXXX)'之间。$(CLEAR_VARS)是一个脚本，清除所有这些变量。</p>

<ul>
<li><p>1、LOCAL_PATH:<br/>
这个变量用于给出当前文件的路径。
必须在 Android.mk 的开头定义，可以这样使用：LOCAL_PATH := $(call my-dir)
如当前目录下有个文件夹名称 src，则可以这样写 $(call src)，那么就会得到 src 目录的完整路径
这个变量不会被$(CLEAR_VARS)清除，因此每个 Android.mk 只需要定义一次(即使在一个文件中定义了几个模块的情况下)。</p></li>
<li><p>2、LOCAL_MODULE:
这是模块的名字，它必须是唯一的，而且不能包含空格。
必须在包含任一的$(BUILD_XXXX)脚本之前定义它。模块的名字决定了生成文件的名字。</p></li>
<li><p>3、LOCAL_SRC_FILES:
这是要编译的源代码文件列表。
只要列出要传递给编译器的文件，因为编译系统自动计算依赖。注意源代码文件名称都是相对于 LOCAL_PATH的，你可以使用路径部分，例如：
LOCAL_SRC_FILES := foo.c toto/bar.c\Hello.c
文件之间可以用空格或Tab键进行分割,换行请用"\&ldquo;
如果是追加源代码文件的话，请用LOCAL_SRC_FILES +=
注意：可以LOCAL_SRC_FILES := $(call all-subdir-java-files)这种形式来包含local_path目录下的所有java文件。</p></li>
<li><p>4、LOCAL_C_INCLUDES:<br/>
可选变量，表示头文件的搜索路径。
默认的头文件的搜索路径是LOCAL_PATH目录。</p></li>
<li><p>5、LOCAL_STATIC_LIBRARIES:
表示该模块需要使用哪些静态库，以便在编译时进行链接。</p></li>
<li><p>6、LOCAL_SHARED_LIBRARIES:<br/>
表示模块在运行时要依赖的共享库（动态库），在链接时就需要，以便在生成文件时嵌入其相应的信息。
注意：它不会附加列出的模块到编译图，也就是仍然需要在Application.mk 中把它们添加到程序要求的模块中。</p></li>
<li><p>7、LOCAL_LDLIBS:<br/>
编译模块时要使用的附加的链接器选项。这对于使用‘-l’前缀传递指定库的名字是有用的。
例如，LOCAL_LDLIBS := -lz表示告诉链接器生成的模块要在加载时刻链接到/system/lib/libz.so
可查看 docs/STABLE-APIS.TXT 获取使用 NDK发行版能链接到的开放的系统库列表。</p></li>
<li><p>8、LOCAL_MODULE_PATH 和 LOCAL_UNSTRIPPED_PATH
在 Android.mk 文件中， 还可以用LOCAL_MODULE_PATH 和LOCAL_UNSTRIPPED_PATH指定最后的目标安装路径.
不同的文件系统路径用以下的宏进行选择：
TARGET_ROOT_OUT：表示根文件系统。
TARGET_OUT：表示 system文件系统。
TARGET_OUT_DATA：表示 data文件系统。
用法如：LOCAL_MODULE_PATH :=$(TARGET_ROOT_OUT)
至于LOCAL_MODULE_PATH 和LOCAL_UNSTRIPPED_PATH的区别，暂时还不清楚。</p></li>
<li><p>9、LOCAL_JNI_SHARED_LIBRARIES：
定义了要包含的so库文件的名字，如果程序没有采用jni，不需要
      LOCAL_JNI_SHARED_LIBRARIES := libxxx 这样在编译的时候，NDK自动会把这个libxxx打包进apk； 放在youapk/lib/目录下</p></li>
</ul>


<h2>五、NDK提供的函数宏</h2>

<p>GNU Make函数宏，必须通过使用'$(call  )&lsquo;来调用，返回值是文本化的信息。</p>

<ul>
<li><p>1、my-dir:返回当前 Android.mk 所在的目录的路径，相对于 NDK 编译系统的顶层。这是有用的，在 Android.mk 文件的开头如此定义：LOCAL_PATH := $(call my-dir)</p></li>
<li><p>2、all-subdir-makefiles: 返回一个位于当前'my-dir'路径的子目录中的所有Android.mk的列表。
     例如，某一子项目的目录层次如下：
          src/foo/Android.mk
          src/foo/lib1/Android.mk
          src/foo/lib2/Android.mk
    如果 src/foo/Android.mk 包含一行：
         include $(call all-subdir-makefiles)
    那么它就会自动包含 src/foo/lib1/Android.mk 和 src/foo/lib2/Android.mk。
    这项功能用于向编译系统提供深层次嵌套的代码目录层次。
    注意，在默认情况下，NDK 将会只搜索在 src/*/Android.mk 中的文件。</p></li>
<li>3、this-makefile:  返回当前Makefile 的路径(即这个函数调用的地方)</li>
<li>4、parent-makefile:  返回调用树中父 Makefile 路径。即包含当前Makefile的Makefile 路径。</li>
<li>5、grand-parent-makefile：返回调用树中父Makefile的父Makefile的路径</li>
</ul>


<h2>六、 Android.mk示例</h2>

<h4>编译静态库</h4>

<p>LOCAL_PATH := $(call my-dir)</br>
include $(CLEAR_VARS)</br>
LOCAL_MODULE = libhellos</br>
LOCAL_CFLAGS = $(L_CFLAGS)</br>
LOCAL_SRC_FILES = hellos.c</br>
LOCAL_C_INCLUDES = $(INCLUDES)</br>
LOCAL_SHARED_LIBRARIES := libcutils</br>
LOCAL_COPY_HEADERS_TO := libhellos</br>
LOCAL_COPY_HEADERS := hellos.h</br>
include $(BUILD_STATIC_LIBRARY)</p>

<h4>编译动态库</h4>

<p>LOCAL_PATH := $(call my-dir)</br>
include $(CLEAR_VARS)</br>
LOCAL_MODULE = libhellod</br>
LOCAL_CFLAGS = $(L_CFLAGS)</br>
LOCAL_SRC_FILES = hellod.c</br>
LOCAL_C_INCLUDES = $(INCLUDES)</br>
LOCAL_SHARED_LIBRARIES := libcutils</br>
LOCAL_COPY_HEADERS_TO := libhellod</br>
LOCAL_COPY_HEADERS := hellod.h</br>
include $(BUILD_SHARED_LIBRARY)</p>

<h4>使用静态库</h4>

<p>LOCAL_PATH := $(call my-dir)</br>
include $(CLEAR_VARS)</br>
LOCAL_MODULE := hellos</br>
LOCAL_STATIC_LIBRARIES := libhellos</br>
LOCAL_SHARED_LIBRARIES :=</br>
LOCAL_LDLIBS += -ldl</br>
LOCAL_CFLAGS := $(L_CFLAGS)</br>
LOCAL_SRC_FILES := mains.c</br>
LOCAL_C_INCLUDES := $(INCLUDES)</br>
include $(BUILD_EXECUTABLE)</p>

<h4>使用动态库</h4>

<p>LOCAL_PATH := $(call my-dir)</br>
include $(CLEAR_VARS)</br>
LOCAL_MODULE := hellod</br>
LOCAL_MODULE_TAGS := debug</br>
LOCAL_SHARED_LIBRARIES := libc libcutils libhellod</br>
LOCAL_LDLIBS += -ldl</br>
LOCAL_CFLAGS := $(L_CFLAGS)</br>
LOCAL_SRC_FILES := maind.c</br>
LOCAL_C_INCLUDES := $(INCLUDES)</br>
include $(BUILD_EXECUTABLE)</p>

<p>Android.mk给变量赋值，同时用的“:=”和“=”，他们分别代表什么意思呢？</p>

<p>“:=” 的意思是，它右边赋得值如果是变量，只能使用在这条语句之前定义好的，而不能使用本条语句之后定义的变量；</p>

<p>“=”，当它的右边赋值是变量时，这个变量的定义在本条语句之前或之后都可以；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解android平台的jni(一)]]></title>
    <link href="http://chendd.github.io/blog/2016/04/05/learn_jni_1/"/>
    <updated>2016-04-05T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2016/04/05/learn_jni_1</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;android中很多Java类都具有native接口，这些接口由本地实现，然后注册到系统中。   <br/>
主要的JNI代码放在以下的路径中：frameworks/base/core/jni/，这个路径中的内容被编译成库 libandroid_runtime.so，被放置在目标系统的/system/lib目录下。此外，android还有其他的 JNI库。JNI中的各个文件，实际上就是普通的C++源文件.
如果要深入了解android framework层，则必须Android Native层运行及开发机制.
这里先介绍一些native的基础知识</p>

<!--more-->


<h4>1、接口定义</h4>

<p>&#160; &#160; &#160; &#160;_JNIEnv定义了一个虚拟机的接口，通过这个接口可以访问虚拟机的所有功能：
1)分配对象（AllocObject/NewObject），并且控制对象的引用计数（NewGlobalRef/DeleteGlobalRef/DeleteLocalRef/IsSameObject/NewLocalRef）。
2)获取类的定义（FindClass），并通过类的定义来获取获取类得方法和成员的ID（GetMethodID/GetFieldID）
3)通过方法ID调用类的普通方法（CallObjectMethod）和静态方法（CallStaticObjectMethod）
4)通过成员ID获取和设置类的普通成员（GetObjectField/SetObjectField）和静态成员（GetStaticObjectField/SetStaticObjectField）</p>

<p>下面是比较常用的方法：</p>

<h6>1.1查找该类：</h6>

<p>   jclass xxx = (*env)->FindClass(env, &ldquo;Lclass_name;&rdquo;);</p>

<h6>1.2取得方法的id：</h6>

<p>   jmethodID xxx = (*env)->GetMethodID(env, jclass, methodName, &ldquo;(M)N&rdquo;);</p>

<h6>1.3查找需要调用的该类的方法：</h6>

<p>   jmethodID xxx = (*env)->GetMethodID(env, jclass, &ldquo;(M)N&rdquo; );</p>

<h6>1.4取得静态方法的id</h6>

<p>   jmethodID  xxx = (*env)->GetStaticMethodID(env,jclass, methodName,&ldquo;(M)N&rdquo;)</p>

<h6>1.5初始化该类的实例：</h6>

<p>   jobject xxx = (*env)->NewObject(env, jclass, jmethodID );</p>

<h6>1.6调用实例的某方法：</h6>

<p>   (*env)->CallObjectMethod(env, jobject, jmethodID, [parameter1, parameter2,&hellip;] );</p>

<h6>1.7释放实例：</h6>

<p>   (*env)->DeleteLocalRef(env, xxx);</p>

<h6>1.8取得成员变量的id</h6>

<p>   jfieldID xxx = (*env)->GetFieldID(env,jclass ,jfieldID,jfieldType)</p>

<h6>1.9取得静态成员变量的id</h6>

<p>   jfieldID xxx = GetStaticFieldID(env,jclass ,jfieldID,jfieldType)
JNIENV - java的运行环境
jobject - 代表java的instance
jclass - 代表java的类</p>

<h4>2、函数与属性签名</h4>

<p>&#160; &#160; &#160; &#160;在GetMethodID和GetFieldID这两个函数中，最后一个参数都是签名字符串，用来标示java函数和成员的唯一性。
因为java中存在重载函数，所以一个函数名不足以唯一指定一个函数，这时候就需要签名字符串来指定函数的参数列表和返回值类型了。
函数签名是一个字符串："(M)N"
括号中的内容是函数的参数类型，括号后面表示函数的返回值。</p>

<h4>3、JNI 类型签名</h4>

<p>&#160; &#160; &#160; &#160;&ldquo;(M)N&rdquo;,这里的M和N指的是该函数的输入和输出参数的类型签名(Type Signature)。
具体的每一个字符的对应关系如下:</p>

<h6>字符&ndash;Java类型&ndash;C类型</h6>

<h6>V&ndash;void&ndash;void</h6>

<h6>Z&ndash;jboolean&ndash;boolean</h6>

<h6>I&ndash;jint&ndash;int</h6>

<h6>J&ndash;jlong&ndash;long</h6>

<h6>D&ndash;jdouble&ndash;double</h6>

<h6>F&ndash;jfloat&ndash;float</h6>

<h6>B&ndash;jbyte&ndash;byte</h6>

<h6>C&ndash;jchar&ndash;char</h6>

<h6>S&ndash;jshort&ndash;short</h6>

<p>数组则以”[&ldquo;开始，用两个字符表示</p>

<h6>[I&ndash;jintArray&ndash;int[]</h6>

<h6>[F&ndash;jfloatArray&ndash;float[]</h6>

<h6>[B&ndash;jbyteArray&ndash;byte[]</h6>

<h6>[C&ndash;jcharArray&ndash;char[]</h6>

<h6>[S&ndash;jshortArray&ndash;short[]</h6>

<h6>[D&ndash;jdoubleArray&ndash;double[]</h6>

<h6>[J&ndash;jlongArray&ndash;long[]</h6>

<h6>[Z&ndash;jbooleanArray&ndash;boolean[]</h6>

<p>&#160; &#160; &#160; &#160;如果Java函数的参数是class，则以”L”开头，以”;”结尾，中间是用”/” 隔开的包及类名。而其对应的C函数名的参数则为jobject</p>

<p>一个例外是String类，其对应的类为jstring</p>

<p>Ljava/lang/String; String jstring</p>

<p>Ljava/net/Socket; Socket jobject</p>

<p>如果JAVA函数位于一个嵌入类，则用$作为类名间的分隔符。
例如 “(Ljava/lang/String;Landroid/os/FileUtils$FileStatus;)Z”
举例说明"(M)N"的含义，例如：</p>

<p>(I)V   带一个int 类型的参数，返回值类型为void</p>

<p>()D     没有参数，返回double</p>
]]></content>
  </entry>
  
</feed>
