<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: View | Chendd's Blog]]></title>
  <link href="http://chendd.github.io/tags/view/atom.xml" rel="self"/>
  <link href="http://chendd.github.io/"/>
  <updated>2016-10-10T11:54:37+08:00</updated>
  <id>http://chendd.github.io/</id>
  <author>
    <name><![CDATA[chendd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android学习日记5--View视图]]></title>
    <link href="http://chendd.github.io/blog/2013/02/19/android_study_05/"/>
    <updated>2013-02-19T22:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2013/02/19/android_study_05</id>
    <content type="html"><![CDATA[<h2>一、android 界面开发</h2>

<h4>1、三个重要的类：View视图、Canvas画布、Paint画笔</h4>

<h4>2、android 界面开发常用三种视图</h4>

<ul>
<li>View            &ndash;只能在主线程中更新，没有缓存机制，适合画面更新较少的界面，比如有按键按下才变化的界面。</li>
<li>SurfaceView &ndash;可以设置独立的线程，有缓存机制，主要用于2D游戏</li>
<li>GLSurfaceView &ndash;主要用于3D游戏，暂时不学习</li>
</ul>


<!--more--> 


<h2>二、View框架</h2>

<p>&#160; &#160; &#160; &#160;同SWIMG、AWT一样，Android也提供大量的View组件给开发者，所有组件都是View的子类，包括以前介绍的常用控件和ViewGroup也是。ViewGroup是View的子类，所以它也具有View的特性，但它主要用来充当View的容器，将其中的View视作自己的孩子，对它的子View进行管理，当然它的孩子也可以是ViewGroup类型。ViewGroup(树根)和它的孩子们(View和ViewGroup)以树形结构形成了一个层次结构，View类有接受和处理消息的功能，android系统所产生的消息会在这些ViewGroup和 View之间传递。</p>

<h4>1、View类结构</h4>

<p>java.lang.Object
&mdash;&mdash;-android.view.View</p>

<p>直接子类：AnalogClock, ImageView, KeyboardView, ProgressBar, SurfaceView, TextView, ViewGroup, ViewStub</p>

<p>当然还有许多其他间接子类。</p>

<h4>2、ViewGroup</h4>

<p>&#160; &#160; &#160; &#160;ViewGroup继承于View，它可以包含其他的View，就像一个View的容器，我们可以调用其成员函数addView()将View当作孩子放到ViewGroup中。</p>

<p>&#160; &#160; &#160; &#160;我们经常使用的LinearLayout、relativeLayout等都是ViewGroup的子类，ViewGroup类中有一个内部类ViewGroup.LayoutParams，我们经常使用LayoutParams的子类来构造布局参数。</p>

<p>&#160; &#160; &#160; &#160;我们也可以自定义自己的布局，以方便日后使用和维护，这时我们就需要继承ViewGroup类并在派生类中重写ViewGroup的一些方法。</p>

<h4>3、自定义View</h4>

<p>&#160; &#160; &#160; &#160;有些自带组件可能无法满足需求，这时候往往需要自定义View，一般只要主要底下两点就可以了。</p>

<ul>
<li>继承View</li>
<li>重写感兴趣的方法</li>
</ul>


<p>自定义View的常用方法:</p>

<p>　　onFinishInflate() 当View中所有的子控件 均被映射成xml后触发</p>

<p>　　onMeasure(int, int) 确定所有子元素的大小</p>

<p>　　onLayout(boolean, int, int, int, int) 当View分配所有的子元素的大小和位置时触发</p>

<p>　　onSizeChanged(int, int, int, int) 当view的大小发生变化时触发</p>

<p>　　onDraw(Canvas) view渲染内容的细节</p>

<p>　　onKeyDown(int, KeyEvent) 有按键按下后触发</p>

<p>　　onKeyUp(int, KeyEvent) 有按键按下后弹起时触发</p>

<p>　　onTrackballEvent(MotionEvent) 轨迹球事件</p>

<p>　　onTouchEvent(MotionEvent) 触屏事件</p>

<p>　　onFocusChanged(boolean, int, Rect) 当View获取 或失去焦点时触发</p>

<p>　　onWindowFocusChanged(boolean) 当窗口包含的view获取或失去焦点时触发</p>

<p>　　onAttachedToWindow() 当view被附着到一个窗口时触发</p>

<p>　　onDetachedFromWindow() 当view离开附着的窗口时触发，Android123提示该方法和  onAttachedToWindow() 是相反的。</p>

<p>　　onWindowVisibilityChanged(int) 当窗口中包含的可见的view发生变化时触发</p>

<h4>4、View实例</h4>

<p>&#160; &#160; &#160; &#160;在View上 写"GameView" ,按方向键 上下左右会随之移动，触摸屏幕、拖动也会移到相应位置。</p>

<p>新建MyView类 继承View基类</p>

<pre><code class="java">package com.example.gameview;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;

public class MyView extends View {

    private int x=10,y=10;

    public MyView(Context context) {
        super(context);
        setFocusable(true);//设置当前view为焦点操作
        // TODO Auto-generated constructor stub
    }

    @Override
    protected void onDraw(Canvas canvas) {
        // TODO Auto-generated method stub
        Paint paint = new Paint();
        paint.setColor(Color.BLACK);
        canvas.drawText("GameView", x, y, paint);

        super.onDraw(canvas);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        // TODO Auto-generated method stub
        if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {
            y-=2;
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN){
            y+=2;
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT){
            x-=2;
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT){
            x+=2;
        }

        invalidate();
        //postInvalidate();
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public boolean onKeyUp(int keyCode, KeyEvent event) {
        // TODO Auto-generated method stub
        return super.onKeyUp(keyCode, event);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        // TODO Auto-generated method stub
        int tx = (int)event.getX();
        int ty = (int)event.getY();
        //玩家手指点击屏幕的动作
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            x = tx;
            y = ty;
            //玩家手指抬起离开屏幕的动作
        } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
            x = tx;
            y = ty;
            //玩家手指在屏幕上移动的动作
        } else if (event.getAction() == MotionEvent.ACTION_UP) {
            x = tx;
            y = ty;
        }
//        //获取用户手指触屏的X坐标赋值与文本的X坐标
//        x = (int)event.getX();
//        //获取用户手指触屏的Y坐标赋值与文本的Y坐标
//        y = (int)event.getY();
//        //重绘画布

        //重绘画布
        invalidate();
        //postInvalidate();
        return true;
    }

}
</code></pre>

<p><img src="http://images.cnitblog.com/blog/602984/201402/162058089063155.png" alt="image" /></p>

<h2>需要特别注意的知识点如下：</h2>

<h4>1、Activity全屏显示</h4>

<pre><code class="java">// 去掉Activity标题栏
this.requestWindowFeature(Window.FEATURE_NO_TITLE);
// 去掉 电量、时间等状态栏，全屏显示
this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
</code></pre>

<p>也可以在AndroidManifest里设置</p>

<pre><code class="xml">android:theme="@android:style/Theme.NoTitleBar.Fullscreen"
</code></pre>

<h4>2、设置模拟器方向键生效</h4>

<p>C:\Users\XX.android\avd\XX.avd
config.ini
hw.dPad=no,把no改成yes，如下：
hw.dPad=yes
重启模拟器即可
XX根据个人命名不同而不同</p>

<h4>3、重写onDraw方法</h4>

<pre><code class="java">Paint paint = new Paint();// 画笔类
paint.setColor(Color.BLACK);// 初始画布为白色，设置画笔为黑色
canvas.drawText("GameView", x, y, paint);// 坐标无论横屏竖屏都是从右上角为 0,0点开始的
super.onDraw(canvas);
</code></pre>

<h4>4、onKeyDown、onKeyUp、onTouchEvent</h4>

<p>　　分别表示按钮 按下、抬起、触摸屏幕的事件</p>

<pre><code class="java">@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
　　return super.onKeyDown(keyCode, event);
}
</code></pre>

<p>第一个参数为键值，手机中每一个按钮都拥有一个完全独立的键值 通过按键键值就可以确定当前按下的是那一个按键。
第二个参数为按键事件，  该对象中保存着当前按键的所有信息 比如 按键发生的时间 按键发生的次数  按键发生的类型等等。
通过以上两个参数就可以拿到当前按键事件的所附带的一切信息。</p>

<p>另外两个方法的参数也一样。</p>

<p>keyCode == KeyEvent.KEYCODE_DPAD_UP 表示 向上的方向键按下</p>

<p> 其他方向键命名类似。</p>

<h4>5、设置当前view为焦点操作才能进行操作</h4>

<p>&#160; &#160; &#160; &#160;在View中须要监听按键的话必需在构造方法中给当前View 设置控制焦点 须要调用 setFocusable(true); 如果没有设置的话 onKeyDown 与onKeyUp 等跟按键有关的 永远无法监听到按键事件。 在onKeyDown 与onKeyUp 通过keyCode 的值就可以判断当前按下那一个按键 ，然后根据event 事件对象就可以拿到当前触发事件的时间等等。</p>

<h4>6、重画</h4>

<ul>
<li>invalidate();// 重绘View树，即draw()过程，在UI主线程调用，不符合单线程安全设计模式</li>
<li>postInvalidate(); //可在自己创建的线程 通过handler通知UI主线程调用</li>
</ul>

]]></content>
  </entry>
  
</feed>
