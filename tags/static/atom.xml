<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: static | Chendd's Blog]]></title>
  <link href="http://chendd.github.io/tags/static/atom.xml" rel="self"/>
  <link href="http://chendd.github.io/"/>
  <updated>2016-08-23T16:30:25+08:00</updated>
  <id>http://chendd.github.io/</id>
  <author>
    <name><![CDATA[chendd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JAVA static 作用]]></title>
    <link href="http://chendd.github.io/blog/2012/11/30/java_static/"/>
    <updated>2012-11-30T18:21:11+08:00</updated>
    <id>http://chendd.github.io/blog/2012/11/30/java_static</id>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。
只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。</p>

<p>&#160; &#160; &#160; &#160;用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象市，不生成static变量的副本，而是类的所有实例共享同一个static变量。
&#160; &#160; &#160; &#160;static变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用&ndash;废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。</p>

<p>&#160; &#160; &#160; &#160;static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：
类名.静态方法名(参数列表&hellip;)
类名.静态变量名</p>

<p>&#160; &#160; &#160; &#160;用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。</p>

<h4>1、static变量</h4>

<p>&#160; &#160; &#160; &#160;按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。</p>

<p>&#160; &#160; &#160; &#160;两者的区别是： 对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。</p>

<p>所以一般在需要实现以下两个功能时使用静态变量：</p>

<ul>
<li>在对象之间共享值时</li>
<li>方便访问变量时</li>
</ul>


<h4>2、静态方法</h4>

<p>&#160; &#160; &#160; &#160;静态方法可以直接通过类名调用，任何的实例也都可以调用，
因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。
因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！
因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。</p>

<p>&#160; &#160; &#160; &#160;例如为了方便方法的调用，Java API中的Math类中所有的方法都是静态的，而一般类内部的static方法也是方便其它类对该方法的调用。</p>

<p>&#160; &#160; &#160; &#160;静态方法是类内部的一类特殊方法，只有在需要时才将对应的方法声明成静态的，一个类内部的方法一般都是非静态的</p>

<h4>3、static代码块</h4>

<p>&#160; &#160; &#160; &#160;static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。例如：</p>

<pre><code class="java">public class Test5 { 
　　private static int a; 
　　private int b; 

static{ 
　　Test5.a=3; 
　　System.out.println(a); 
　　Test5 t=new Test5(); 
　　t.f(); 
　　t.b=1000; 
　　System.out.println(t.b); 
} 

static{ 
　　Test5.a=4; 
　　System.out.println(a); 
} 
public static void main(String[] args) { 
　　// TODO 自动生成方法存根 
} 

static{ 
　　Test5.a=5; 
　　System.out.println(a); 
} 
public void f(){ 
　　System.out.println("hhahhahah"); 
} 
}  
</code></pre>

<p>运行结果：
    3
    hhahhahah
    1000
    4
    5</p>

<p>&#160; &#160; &#160; &#160;利用静态代码块可以对一些static变量进行赋值，最后再看一眼这些例子，都一个static的main方法，这样JVM在运行main方法的时候可以直接调用而不用创建实例。</p>

<h4>4、static和final一块用表示什么</h4>

<p>&#160; &#160; &#160; &#160;static final用来修饰成员变量和成员方法，可简单理解为“全局常量”！对于变量，表示一旦给值就不可修改，并且通过类名可以访问。
对于方法，表示不可覆盖，并且可以通过类名直接访问。</p>

<p>&#160; &#160; &#160; &#160;有时你希望定义一个类成员，使它的使用完全独立于该类的任何对象。通常情况下，类成员必须通过它的类的对象访问，但是可以创建这样一个成员，它能够被它自己使用，而不必引用特定的实例。在成员的声明前面加上关键字static(静态的)就能创建这样的成员。如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象。你可以将方法和变量都声明为static。static 成员的最常见的例子是main( ) 。因为在程序开始执行时必须调用main() ，所以它被声明为static。</p>

<p>&#160; &#160; &#160; &#160;static成员是不能被其所在class创建的实例访问的。如果不加static修饰的成员是对象成员，也就是归每个对象所有的。 加static修饰的成员是类成员，就是可以由一个类直接调用，为所有对象共有的</p>
]]></content>
  </entry>
  
</feed>
