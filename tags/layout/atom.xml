<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: layout | Chendd's Blog]]></title>
  <link href="http://chendd.github.io/tags/layout/atom.xml" rel="self"/>
  <link href="http://chendd.github.io/"/>
  <updated>2016-07-28T17:57:17+08:00</updated>
  <id>http://chendd.github.io/</id>
  <author>
    <name><![CDATA[chendd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[android学习日记12--布局管理器]]></title>
    <link href="http://chendd.github.io/blog/2013/03/03/android_study_12/"/>
    <updated>2013-03-03T19:32:12+08:00</updated>
    <id>http://chendd.github.io/blog/2013/03/03/android_study_12</id>
    <content type="html"><![CDATA[<h4>1、概述</h4>

<p>&#160; &#160; &#160; &#160;布局管理器的用途：</p>

<ul>
<li>a、可以更好的管理组件;</li>
<li>b、通过使用布局管理器，Android应用程序可以做到平台无关性</li>
</ul>


<!--more-->


<p>&#160; &#160; &#160; &#160;布局管理器都是ViewGroup的子类，所有可充当容器的父类都是ViewGroup，而ViewGroup也是View的子类</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/032030374569965.jpg" alt="image" />　　</p>

<p>&#160; &#160; &#160; &#160;下面分别介绍常用的布局管理器</p>

<h4>2、线性布局管理器</h4>

<p>&#160; &#160; &#160; &#160;LinearLayout,最常用的布局之一。它提供控件水平或垂直排列的模型</p>

<p>&#160; &#160; &#160; &#160;常用属性及其对应方法：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/022144094936518.jpg" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;gravity 可取属性说明：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/172209512095155.jpg" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;当需要为gravity设多个值时，可用|分隔开</p>

<p>&#160; &#160; &#160; &#160;布局XML:</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt; 
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" 
android:orientation="horizontal" 
android:layout_width="fill_parent" 
android:layout_height="fill_parent" 
android:id="@+id/lla" 
android:gravity="right" 
&gt;  

&lt;Button  
android:text="添加"  
android:id="@+id/Button01"  
android:layout_width="wrap_content"  
android:layout_height="wrap_content"&gt;   
&lt;/Button&gt; 

&lt;/LinearLayout&gt;
</code></pre>

<p>JAVA代码：</p>

<pre><code class="java">// 计数器，记录按钮个数
    int count = 0;

    @Override
    public void onCreate(Bundle savedInstanceState) { // 重写 onCreate 方法
        super.onCreate(savedInstanceState);
        setContentView(R.layout.horizontal_layout);
        // 获取屏幕中的按钮控件对象
        Button button = (Button) findViewById(R.id.Button01);

        // 为按钮添加 OnClickListener 接口实现
        button.setOnClickListener(


        new View.OnClickListener() {

            public void onClick(View v) {
                // 获取线性布局对象
                LinearLayout ll = (LinearLayout) findViewById(R.id.lla);

                String msg = MainActivity.this.getResources().getString(
                        R.string.button);
                // 创建一个 Button 对象
                Button tempbutton = new Button(MainActivity.this);



                tempbutton.setText(msg + (++count)); // 设置 Button 控件显示的内容
                // 设置 Button 的宽度
                tempbutton.setWidth(80);
                // 向线性布局中添加 View
                ll.addView(tempbutton);



            }

        });

    }
</code></pre>

<p>&#160; &#160; &#160; &#160;运行效果：每点击添加按钮一次会在下方垂直生成一个按钮</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/022150299382543.jpg" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;将布局文件中</p>

<p>android:orientation=&ldquo;vertical&rdquo;</p>

<p>vertical改为horizontal</p>

<p>&#160; &#160; &#160; &#160;每点击一次会在右方水平方向生成一个按钮</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/022152106602619.jpg" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;当水平方向该行容不下一个宽度为80的按钮时，按钮就会被压缩，如下图</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/022153319459350.jpg" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;此时再点击添加按钮时，画面没有任何变化，不会另起一行添加按钮，超出屏幕的将不会被显示。</p>

<h4>3、表格布局</h4>

<p>&#160; &#160; &#160; &#160;TableLayout 类似HTML里的Table分为行和列来管理。
每一行为一个TableRow，也可以为View对象。当为View对象时就跨越该行所有列
TableRow中可以添加子控件，每个子控件为一列。并不会为每个单元格绘制边框
每个单元格为一个View，可以有空的单元格，也可以跨越多列
一个列的宽度由该列最宽的单元格决定的</p>

<p>TableLayout 可以设置三种属性</p>

<ul>
<li>Shrinkable ：它可以被压缩以适应其父容器的大小</li>
<li>Stretchable ：它可以被拉伸以填满空闲区域</li>
<li>Collapsed ：该列被隐藏</li>
</ul>


<p><img src="http://images.cnitblog.com/i/602984/201403/032017117258508.png" alt="image" /></p>

<p>&#160; &#160; &#160; &#160;如果要对多列进行设置，用逗号隔开</p>

<p>&#160; &#160; &#160; &#160;这三个属性在JAVA代码也有对应的方法，值得一提的是它是继承Linearlayout的</p>

<p>布局XML:</p>

<pre><code class="xml">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/LinearLayout01"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:background="@drawable/water"
    android:gravity="bottom"
    android:orientation="vertical" &gt;

    &lt;TableLayout
        android:id="@+id/TableLayout01"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" &gt;

        &lt;TextView
            android:id="@+id/TextView01"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_centerInParent="true"
            android:layout_margin="4px"
            android:background="@drawable/darkgray"
            android:text="@string/tv1" &gt;
        &lt;/TextView&gt;
    &lt;/TableLayout&gt;

    &lt;TableLayout
        android:id="@+id/TableLayout02"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:stretchColumns="0" &gt;

        &lt;TableRow
            android:id="@+id/TableRow01"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" &gt;

            &lt;TextView
                android:id="@+id/TextView02"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_centerInParent="true"
                android:layout_margin="4px"
                android:background="@drawable/blue"
                android:text="@string/tvStrech" &gt;
            &lt;/TextView&gt;

            &lt;TextView
                android:id="@+id/TextView03"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_centerInParent="true"
                android:layout_margin="4px"
                android:text="@string/tvShort" &gt;
            &lt;/TextView&gt;
        &lt;/TableRow&gt;
    &lt;/TableLayout&gt;

    &lt;TableLayout
        android:id="@+id/TableLayout03"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:collapseColumns="1"
        android:shrinkColumns="0" &gt;

        &lt;TableRow
            android:id="@+id/TableRow02"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" &gt;

            &lt;TextView
                android:id="@+id/TextView04"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_centerInParent="true"
                android:layout_margin="4px"
                android:background="@drawable/darkgray"
                android:text="@string/tvShrink" &gt;
            &lt;/TextView&gt;

            &lt;TextView
                android:id="@+id/TextView05"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_centerInParent="true"
                android:layout_margin="4px"
                android:background="@drawable/lightred"
                android:text="@string/tvShort" &gt;
            &lt;/TextView&gt;

            &lt;TextView
                android:id="@+id/TextView06"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_centerInParent="true"
                android:layout_margin="4px"
                android:background="@drawable/blue"
                android:text="@string/tvLong" &gt;
            &lt;/TextView&gt;
        &lt;/TableRow&gt;
    &lt;/TableLayout&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>运行效果：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/032020546195104.png" alt="image" /></p>

<h4>4、相对布局</h4>

<p>&#160; &#160; &#160; &#160;RelativeLayout子控件 的位置由兄弟控件或父容器来决定的
如果A控件由B控件来决定位置，则布局文件B控件要在A控件声明之前</p>

<p>常用属性</p>

<ul>
<li><p>第一类:属性值为true或false</p>

<ul>
<li>android:layout_centerHrizontal 水平居中</li>
<li>android:layout_centerVertical 垂直居中</li>
<li>android:layout_centerInparent 相对于父元素完全居中</li>
<li>android:layout_alignParentBottom 贴紧父元素的下边缘</li>
<li>android:layout_alignParentLeft 贴紧父元素的左边缘</li>
<li>android:layout_alignParentRight 贴紧父元素的右边缘</li>
<li>android:layout_alignParentTop 贴紧父元素的上边缘</li>
<li>android:layout_alignWithParentIfMissing 如果对应的兄弟元素找不到的话就以父元素做参照物</li>
</ul>
</li>
<li><p>第二类：属性值必须为id的引用名“@id/id-name”</p>

<ul>
<li>android:layout_below 在某元素的下方</li>
<li>android:layout_above 在某元素的的上方</li>
<li>android:layout_toLeftOf 在某元素的左边</li>
<li>android:layout_toRightOf 在某元素的右边</li>
<li>android:layout_alignTop 本元素的上边缘和某元素的的上边缘对齐</li>
<li>android:layout_alignLeft 本元素的左边缘和某元素的的左边缘对齐</li>
<li>android:layout_alignBottom 本元素的下边缘和某元素的的下边缘对齐</li>
<li>android:layout_alignRight 本元素的右边缘和某元素的的右边缘对齐</li>
</ul>
</li>
<li><p>第三类：属性值为具体的像素值，如30dip，40px</p>

<ul>
<li>android:layout_marginBottom 离某元素底边缘的距离</li>
<li>android:layout_marginLeft 离某元素左边缘的距离</li>
<li>android:layout_marginRight 离某元素右边缘的距离</li>
<li>android:layout_marginTop 离某元素上边缘的距离</li>
</ul>
</li>
</ul>


<p>布局XML:</p>

<pre><code class="xml">&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".MainActivity" &gt;

    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/hello_world" 
        android:id="@+id/tv1"
        android:layout_centerInParent="true"
        /&gt;

    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="big" 
        android:textSize="30sp"
        android:id="@+id/tv2"
        android:layout_toRightOf="@id/tv1"
        android:layout_alignBottom="@id/tv1"
        /&gt;

    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="middle" 
        android:textSize="20sp"
        android:id="@+id/tv3"
        android:layout_above="@id/tv1"
        android:layout_alignLeft="@id/tv1"
        /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>运行效果：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/032022358875807.png" alt="image" /></p>

<h4>5、帧布局</h4>

<p>&#160; &#160; &#160; &#160;FrameLayout在屏幕上开辟一块区域，在这块区域可以添加多个控件
但都会被对其到屏幕左上角，并且大小取决于最大的控件，如果控件一样大，只能看到最上面的控件</p>

<p>布局XML:</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;

    &lt;TextView
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"
        android:background="@drawable/lightgray"
        android:gravity="center"
        android:text="big" /&gt;

    &lt;TextView
        android:layout_width="150dp"
        android:layout_height="150dp"
        android:background="@drawable/darkgray"
        android:gravity="center"
        android:text="middle" /&gt;

    &lt;TextView
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:background="@drawable/blue"
        android:gravity="center"
        android:text="small" /&gt;

&lt;/FrameLayout&gt;
</code></pre>

<p>运行效果：</p>

<p><img src="http://images.cnitblog.com/i/602984/201403/032024006754913.png" alt="image" /></p>

<h4>6、绝对布局</h4>

<p>&#160; &#160; &#160; &#160;AbsoluteLayout是绝对位置布局。在此布局中的子元素的android:layout_x和android:layout_y属性将生效，用于描述该子元素的坐标位置。屏幕左上角为坐标原点（0,0），第一个0代表横坐标，向右移动此值增大，第二个0代表纵坐标，向下移动，此值增大。在此布局中的子元素可以相互重叠。在实际开发中，通常不采用此布局格式，因为它的界面代码过于刚性，以至于有可能不能很好的适配各种终端。由于不采用，在此就不演示代码了。</p>
]]></content>
  </entry>
  
</feed>
